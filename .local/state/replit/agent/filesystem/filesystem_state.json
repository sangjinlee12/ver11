{"file_contents":{"add_holidays.py":{"content":"from app import app, db\nfrom holidays import add_korean_holidays\n\n# 앱 컨텍스트 내에서 실행\nwith app.app_context():\n    print(\"2025년 공휴일 등록 중...\")\n    add_korean_holidays(2025)\n    print(\"2025년 공휴일 등록 완료\")\n    \n    print(\"2026년 공휴일 등록 중...\")\n    add_korean_holidays(2026)\n    print(\"2026년 공휴일 등록 완료\")\n    \n    print(\"공휴일 등록이 완료되었습니다.\")","size_bytes":431},"admin.py":{"content":"from flask import Blueprint, render_template, redirect, url_for, flash, request, jsonify, send_file, make_response\nimport pandas as pd\nimport tempfile\nimport os\nimport tempfile\nfrom flask_login import login_required, current_user\nfrom app import db\nfrom models import User, VacationDays, VacationRequest, VacationStatus, Holiday, Role, EmploymentCertificate, CertificateStatus, CompanyInfo\nfrom forms import EmployeeVacationDaysForm, VacationApprovalForm, HolidayForm, CertificateApprovalForm, CompanyInfoForm, EmployeeHireDateForm, BulkUploadForm, VacationSearchForm, AdminVacationForm, EmployeeRegistrationForm, AdminCertificateIssueForm\nfrom functools import wraps\nfrom datetime import datetime, date\nimport csv\nimport io\nfrom docx import Document\nfrom docx.shared import Inches, Cm\nfrom docx.enum.text import WD_ALIGN_PARAGRAPH\nfrom docx.enum.table import WD_TABLE_ALIGNMENT\nfrom docx.shared import RGBColor\nimport os\nimport tempfile\nimport pandas as pd\nfrom werkzeug.utils import secure_filename\nfrom utils import get_vacation_days_count\n\nadmin_bp = Blueprint('admin', __name__)\n\n# 관리자 권한 확인용 데코레이터\ndef admin_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated or not current_user.is_admin():\n            flash('관리자 권한이 필요합니다.', 'danger')\n            return redirect(url_for('main.dashboard'))\n        return f(*args, **kwargs)\n    return decorated_function\n\n@admin_bp.route('/dashboard')\n@login_required\n@admin_required\ndef dashboard():\n    \"\"\"관리자 대시보드\"\"\"\n    # 통계 데이터 준비\n    total_employees = User.query.filter_by(role=Role.EMPLOYEE).count()\n    pending_requests = VacationRequest.query.filter_by(status=VacationStatus.PENDING).count()\n    approved_requests = VacationRequest.query.filter_by(status=VacationStatus.APPROVED).count()\n    rejected_requests = VacationRequest.query.filter_by(status=VacationStatus.REJECTED).count()\n    \n    # 최근 신청된 휴가 목록 (10개)\n    recent_requests = VacationRequest.query.order_by(VacationRequest.created_at.desc()).limit(10).all()\n    \n    # 부서별 휴가 사용 통계\n    dept_stats = db.session.query(\n        User.department,\n        db.func.sum(VacationDays.used_days).label('used'),\n        db.func.sum(VacationDays.total_days).label('total')\n    ).join(VacationDays, User.id == VacationDays.user_id)\\\n    .filter(User.department != None)\\\n    .group_by(User.department).all()\n    \n    current_year = datetime.now().year\n    \n    # 추가 통계 데이터\n    pending_vacations = VacationRequest.query.filter_by(status=VacationStatus.PENDING).count()\n    pending_certificates = EmploymentCertificate.query.filter_by(status=CertificateStatus.PENDING).count()\n    total_holidays = Holiday.query.count()\n    \n    # 최근 휴가 신청 (5개)\n    recent_vacations = VacationRequest.query.order_by(VacationRequest.created_at.desc()).limit(5).all()\n    \n    # 최근 증명서 신청 (5개)\n    recent_certificates = EmploymentCertificate.query.order_by(EmploymentCertificate.created_at.desc()).limit(5).all()\n    \n    # 부서별 인원 통계\n    department_stats = {}\n    departments = db.session.query(User.department, db.func.count(User.id)).filter(User.department != None).group_by(User.department).all()\n    for dept, count in departments:\n        department_stats[dept] = count\n\n    return render_template(\n        'admin/dashboard_gov.html',\n        total_employees=total_employees,\n        pending_vacations=pending_vacations,\n        pending_certificates=pending_certificates,\n        total_holidays=total_holidays,\n        recent_vacations=recent_vacations,\n        recent_certificates=recent_certificates,\n        department_stats=department_stats,\n        current_year=current_year\n    )\n\n@admin_bp.route('/employees')\n@login_required\n@admin_required\ndef manage_employees():\n    \"\"\"직원 관리 페이지\"\"\"\n    current_year = datetime.now().year\n    upload_form = BulkUploadForm()\n    \n    # 직원과 현재 연도 휴가 데이터 조인하여 가져오기\n    employees_query = db.session.query(User, VacationDays).outerjoin(\n        VacationDays, \n        (User.id == VacationDays.user_id) & (VacationDays.year == current_year)\n    ).filter(User.role == Role.EMPLOYEE).all()\n    \n    # 직원 목록을 위한 데이터 구조 생성\n    from utils import calculate_remaining_vacation_days\n    employees = []\n    for user, vacation_days in employees_query:\n        # 실시간 휴가 잔여일수 계산 및 업데이트\n        remaining_days = calculate_remaining_vacation_days(user.id, current_year)\n        \n        # 사용자 객체에 현재 연도 휴가 데이터 추가\n        user.current_vacation_days = vacation_days\n        user.remaining_vacation_days = remaining_days  # 실시간 계산된 잔여일수\n        employees.append(user)\n    \n    return render_template(\n        'admin/manage_employees.html',\n        employees=employees,\n        current_year=current_year,\n        upload_form=upload_form\n    )\n\n\n@admin_bp.route('/employees/upload', methods=['POST'])\n@login_required\n@admin_required\ndef upload_employees():\n    \"\"\"직원 대량 업로드 처리\"\"\"\n    form = BulkUploadForm()\n    \n    if form.validate_on_submit():\n        try:\n            # 업로드된 파일 처리\n            file = form.file.data\n            filename = secure_filename(file.filename)\n            file_path = os.path.join(tempfile.gettempdir(), filename)\n            file.save(file_path)\n            \n            # 파일 확장자에 따라 적절한 pandas 함수 선택\n            if filename.endswith('.xlsx'):\n                df = pd.read_excel(file_path)\n            else:  # .xls 파일\n                df = pd.read_excel(file_path, engine='xlrd')\n            \n            # 필수 열 확인\n            required_columns = ['username', 'name', 'password', 'email', 'resident_id_first', 'resident_id_last_digit', 'department', 'position']\n            missing_columns = [col for col in required_columns if col not in df.columns]\n            \n            if missing_columns:\n                flash(f'엑셀 파일에 다음 열이 누락되었습니다: {\", \".join(missing_columns)}', 'danger')\n                return redirect(url_for('admin.manage_employees'))\n            \n            # 성공 및 오류 카운트\n            success_count = 0\n            error_count = 0\n            error_messages = []\n            \n            # 각 행 처리\n            for idx, row in df.iterrows():\n                try:\n                    username = str(row['username']).strip()\n                    name = str(row['name']).strip()\n                    password = str(row['password']).strip()\n                    email = str(row['email']).strip()\n                    resident_id_first = str(row['resident_id_first']).strip()\n                    resident_id_last_digit = str(row['resident_id_last_digit']).strip()\n                    department = str(row['department']).strip()\n                    position = str(row['position']).strip()\n                    \n                    # hire_date가 있으면 처리\n                    hire_date = None\n                    if 'hire_date' in df.columns and pd.notna(row['hire_date']):\n                        try:\n                            hire_date = pd.to_datetime(row['hire_date']).date()\n                        except:\n                            hire_date = None\n                    \n                    # 이미 존재하는 사용자인지 확인\n                    existing_user = User.query.filter(\n                        (User.username == username) | (User.email == email)\n                    ).first()\n                    \n                    if existing_user:\n                        error_count += 1\n                        error_messages.append(f\"행 {idx+1}: 사용자명({username}) 또는 이메일({email})이 이미 존재합니다.\")\n                        continue\n                    \n                    # 새 사용자 생성\n                    new_user = User(\n                        username=username,\n                        email=email,\n                        name=name,\n                        resident_id_first=resident_id_first,\n                        resident_id_last_digit=resident_id_last_digit,\n                        department=department,\n                        position=position,\n                        hire_date=hire_date,\n                        role=Role.EMPLOYEE\n                    )\n                    new_user.set_password(password)\n                    db.session.add(new_user)\n                    success_count += 1\n                    \n                except Exception as e:\n                    error_count += 1\n                    error_messages.append(f\"행 {idx+1}: {str(e)}\")\n            \n            # 트랜잭션 완료\n            db.session.commit()\n            \n            # 결과 메시지\n            if success_count > 0:\n                flash(f'{success_count}명의 직원이 성공적으로 등록되었습니다.', 'success')\n            if error_count > 0:\n                flash(f'{error_count}명의 직원 등록에 실패했습니다.', 'warning')\n                for msg in error_messages[:10]:  # 처음 10개의 오류만 표시\n                    flash(msg, 'warning')\n                if len(error_messages) > 10:\n                    flash(f'그 외 {len(error_messages) - 10}개의 오류가 더 있습니다.', 'warning')\n            \n            # 임시 파일 삭제\n            os.remove(file_path)\n            \n        except Exception as e:\n            flash(f'파일 처리 중 오류가 발생했습니다: {str(e)}', 'danger')\n    else:\n        for field, errors in form.errors.items():\n            for error in errors:\n                flash(f'{getattr(form, field).label.text}: {error}', 'danger')\n    \n    return redirect(url_for('admin.manage_employees'))\n\n\n@admin_bp.route('/employees/template')\n@login_required\n@admin_required\ndef download_employee_template():\n    \"\"\"직원 대량 등록 샘플 엑셀 파일 다운로드\"\"\"\n    # 엑셀 파일 생성\n    df = pd.DataFrame(columns=[\n        'username', 'name', 'password', 'email', 'resident_id_first', 'resident_id_last_digit', 'department', 'position', 'hire_date'\n    ])\n    \n    # 샘플 데이터 추가\n    df.loc[0] = ['employee1', '홍길동', 'password123', 'employee1@example.com', '900101', '1', '영업팀', '사원', '2025-01-02']\n    df.loc[1] = ['employee2', '김철수', 'password123', 'employee2@example.com', '910215', '2', '공사팀', '대리', '2024-09-15']\n    df.loc[2] = ['employee3', '이영희', 'password123', 'employee3@example.com', '920315', '2', '공무부', '과장', '2023-05-10']\n    df.loc[3] = ['employee4', '박민수', 'password123', 'employee4@example.com', '880620', '1', '경리부', '차장', '2022-03-01']\n    \n    # BytesIO 객체에 엑셀 파일 저장\n    output = io.BytesIO()\n    with pd.ExcelWriter(output, engine='openpyxl') as writer:\n        df.to_excel(writer, index=False)\n    output.seek(0)\n    \n    # 응답 생성\n    response = make_response(output.getvalue())\n    response.headers['Content-Type'] = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    response.headers['Content-Disposition'] = 'attachment; filename=employee_template.xlsx'\n    \n    return response\n\n@admin_bp.route('/employees/add', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef add_employee():\n    \"\"\"직원 등록 페이지\"\"\"\n    form = EmployeeRegistrationForm()\n    \n    if form.validate_on_submit():\n        try:\n            # 새 직원 생성\n            new_employee = User(\n                username=form.username.data,\n                email=form.email.data,\n                name=form.name.data,\n                resident_id_first=form.resident_id_first.data,\n                resident_id_last_digit=form.resident_id_last_digit.data,\n                department=form.department.data,\n                position=form.position.data,\n                hire_date=form.hire_date.data,\n                role=Role.EMPLOYEE\n            )\n            new_employee.set_password(form.password.data)\n            db.session.add(new_employee)\n            db.session.flush()  # ID를 얻기 위해 flush\n            \n            # 현재 연도와 내년 휴가 일수 설정\n            current_year = datetime.now().year\n            for year in [current_year, current_year + 1]:\n                vacation_days = VacationDays(\n                    user_id=new_employee.id,\n                    year=year,\n                    total_days=15,  # 기본 15일\n                    used_days=0\n                )\n                db.session.add(vacation_days)\n            \n            db.session.commit()\n            flash(f'{form.name.data}님이 성공적으로 등록되었습니다.', 'success')\n            return redirect(url_for('admin.manage_employees'))\n            \n        except Exception as e:\n            db.session.rollback()\n            flash(f'직원 등록 중 오류가 발생했습니다: {str(e)}', 'danger')\n    \n    return render_template('admin/add_employee.html', form=form)\n\n\n\n\n@admin_bp.route('/add_vacation', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef add_vacation():\n    \"\"\"관리자가 직원에게 휴가 등록\"\"\"\n    form = AdminVacationForm()\n    \n    # 직원 목록을 폼에 설정\n    employees = User.query.filter_by(role=Role.EMPLOYEE).all()\n    form.user_id.choices = [(emp.id, f\"{emp.name} ({emp.department})\") for emp in employees]\n    \n    if form.validate_on_submit():\n        try:\n            # 휴가 일수 계산\n            vacation_days = get_vacation_days_count(\n                form.start_date.data, \n                form.end_date.data, \n                form.type.data\n            )\n            \n            # 직원의 남은 휴가 일수 확인 (특별휴가 제외)\n            if form.type.data != '특별휴가':\n                year = form.start_date.data.year\n                user_vacation_days = VacationDays.query.filter_by(\n                    user_id=form.user_id.data, \n                    year=year\n                ).first()\n                \n                if user_vacation_days:\n                    remaining_days = user_vacation_days.total_days - user_vacation_days.used_days\n                    if vacation_days > remaining_days:\n                        flash(f'해당 직원의 남은 휴가 일수가 부족합니다. (남은 일수: {remaining_days}일)', 'danger')\n                        return render_template('admin/add_vacation.html', form=form)\n            \n            # 중복 휴가 신청 확인\n            existing_vacation = VacationRequest.query.filter(\n                VacationRequest.user_id == form.user_id.data,\n                VacationRequest.status.in_([VacationStatus.PENDING, VacationStatus.APPROVED]),\n                ((VacationRequest.start_date <= form.start_date.data) & (VacationRequest.end_date >= form.start_date.data)) |\n                ((VacationRequest.start_date <= form.end_date.data) & (VacationRequest.end_date >= form.end_date.data))\n            ).first()\n            \n            if existing_vacation:\n                flash('해당 기간에 이미 휴가가 등록되어 있습니다.', 'danger')\n                return render_template('admin/add_vacation.html', form=form)\n            \n            # 새로운 휴가 신청 생성 (자동 승인 상태)\n            new_vacation = VacationRequest(\n                user_id=form.user_id.data,\n                start_date=form.start_date.data,\n                end_date=form.end_date.data,\n                days=vacation_days,\n                type=form.type.data,\n                reason=form.reason.data,\n                status=VacationStatus.APPROVED,  # 관리자가 등록하므로 자동 승인\n                approved_by=current_user.id,\n                approval_date=datetime.now()\n            )\n            \n            db.session.add(new_vacation)\n            \n            # 특별휴가가 아닌 경우 휴가 일수 차감\n            if form.type.data != '특별휴가':\n                year = form.start_date.data.year\n                user_vacation_days = VacationDays.query.filter_by(\n                    user_id=form.user_id.data, \n                    year=year\n                ).first()\n                \n                if user_vacation_days:\n                    user_vacation_days.used_days = (user_vacation_days.used_days or 0) + vacation_days\n                else:\n                    # 휴가 일수 레코드가 없으면 생성\n                    new_vacation_days = VacationDays(\n                        user_id=form.user_id.data,\n                        year=year,\n                        total_days=15,  # 기본 15일\n                        used_days=vacation_days\n                    )\n                    db.session.add(new_vacation_days)\n            \n            db.session.commit()\n            \n            user = User.query.get(form.user_id.data)\n            flash(f'{user.name}님의 휴가가 성공적으로 등록되었습니다.', 'success')\n            return redirect(url_for('admin.manage_vacations'))\n            \n        except Exception as e:\n            db.session.rollback()\n            flash(f'휴가 등록 중 오류가 발생했습니다: {str(e)}', 'danger')\n    \n    return render_template('admin/add_vacation.html', form=form)\n\n@admin_bp.route('/employees/vacation-days', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef set_vacation_days():\n    \"\"\"직원 연간 휴가일수 설정\"\"\"\n    form = EmployeeVacationDaysForm()\n    \n    if form.validate_on_submit():\n        user_id = form.user_id.data\n        year = form.year.data\n        total_days = form.total_days.data\n        \n        # 해당 직원의 해당 연도 휴가 정보 검색\n        vacation_days = VacationDays.query.filter_by(user_id=user_id, year=year).first()\n        \n        if vacation_days:\n            # 기존 레코드 업데이트\n            vacation_days.total_days = total_days\n        else:\n            # 새 레코드 생성\n            vacation_days = VacationDays(\n                user_id=user_id,\n                year=year,\n                total_days=total_days,\n                used_days=0\n            )\n            db.session.add(vacation_days)\n        \n        db.session.commit()\n        flash(f'직원 {User.query.get(user_id).name}의 {year}년 휴가일수가 설정되었습니다.', 'success')\n        return redirect(url_for('admin.manage_employees'))\n    \n    # GET 요청 처리\n    user_id = request.args.get('user_id', type=int)\n    year = request.args.get('year', datetime.now().year, type=int)\n    \n    if user_id:\n        user = User.query.get_or_404(user_id)\n        vacation_days = VacationDays.query.filter_by(user_id=user_id, year=year).first()\n        \n        if vacation_days:\n            form.total_days.data = vacation_days.total_days\n        \n        form.user_id.data = user_id\n        form.year.data = year\n        \n        return render_template(\n            'admin/set_vacation_days.html',\n            form=form,\n            user=user,\n            year=year\n        )\n    \n    return redirect(url_for('admin.manage_employees'))\n\n@admin_bp.route('/vacations', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef manage_vacations():\n    \"\"\"휴가 관리 페이지 (기간 검색 및 엑셀 출력 지원)\"\"\"\n    form = VacationSearchForm()\n    \n    # 기본 쿼리\n    query = db.session.query(\n        VacationRequest,\n        User.name,\n        User.department,\n        User.position\n    ).join(User, User.id == VacationRequest.user_id)\n    \n    # 폼 처리 (POST 요청 모두 처리)\n    if request.method == 'POST':\n        # 엑셀 다운로드 요청\n        if form.export.data:\n            return export_vacation_data(form)\n        \n        # 검색 필터 적용 (우선순위: 년도/월 > 기간 > 기타)\n        \n        # 1. 년도/월 검색 (우선순위 높음)\n        if form.year.data and form.year.data != 0:\n            # SQLite에서는 extract 대신 strftime 사용\n            from sqlalchemy import func\n            query = query.filter(func.strftime('%Y', VacationRequest.start_date) == str(form.year.data))\n            \n            # 월이 선택된 경우 해당 월만 검색\n            if hasattr(form, 'month') and form.month.data and form.month.data != 0:\n                month_str = f'{form.month.data:02d}'  # 01, 02, ..., 12 형식\n                query = query.filter(func.strftime('%m', VacationRequest.start_date) == month_str)\n        \n        # 2. 기간 검색 (년도가 선택되지 않은 경우에만 적용)\n        elif form.start_date.data or form.end_date.data:\n            if form.start_date.data:\n                query = query.filter(VacationRequest.start_date >= form.start_date.data)\n            if form.end_date.data:\n                query = query.filter(VacationRequest.end_date <= form.end_date.data)\n        \n        # 3. 직원명 검색 (선택사항)\n        if form.employee_name.data and form.employee_name.data.strip():\n            query = query.filter(User.name.contains(form.employee_name.data.strip()))\n        \n        # 4. 상태 검색\n        if form.status.data != 'all':\n            query = query.filter(VacationRequest.status == form.status.data)\n        \n        # 5. 부서 검색\n        if form.department.data != 'all':\n            query = query.filter(User.department == form.department.data)\n    \n    # URL 파라미터로부터 필터 적용 (기존 호환성)\n    status_filter = request.args.get('status', 'all')\n    if status_filter != 'all' and request.method != 'POST':\n        query = query.filter(VacationRequest.status == status_filter)\n        form.status.data = status_filter\n    \n    # 정렬 (최신순)\n    results = query.order_by(VacationRequest.created_at.desc()).all()\n    \n    # 결과 정리\n    vacation_requests = []\n    for vacation_request, name, department, position in results:\n        vacation_request.user_name = name\n        vacation_request.user_department = department\n        vacation_request.user_position = position\n        vacation_requests.append(vacation_request)\n    \n    return render_template(\n        'admin/manage_vacations.html',\n        vacation_requests=vacation_requests,\n        status_filter=status_filter,\n        search_form=form\n    )\n\n@admin_bp.route('/vacations/<int:request_id>', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef process_vacation(request_id):\n    \"\"\"휴가 승인/반려 처리\"\"\"\n    vacation_request = VacationRequest.query.get_or_404(request_id)\n    form = VacationApprovalForm()\n    \n    if form.validate_on_submit():\n        vacation_request.status = form.status.data\n        vacation_request.comments = form.comments.data\n        vacation_request.approved_by = current_user.id\n        vacation_request.approval_date = datetime.now()\n        \n        # 승인될 경우 휴가 일수 업데이트\n        if form.status.data == VacationStatus.APPROVED:\n            year = vacation_request.start_date.year\n            vacation_days = VacationDays.query.filter_by(user_id=vacation_request.user_id, year=year).first()\n            \n            if vacation_days:\n                vacation_days.used_days += vacation_request.days\n            \n        db.session.commit()\n        flash('휴가 요청이 처리되었습니다.', 'success')\n        return redirect(url_for('admin.manage_vacations'))\n    \n    # GET 요청 처리\n    form.request_id.data = request_id\n    \n    return render_template(\n        'admin/process_vacation.html',\n        form=form,\n        vacation_request=vacation_request\n    )\n\ndef export_vacation_data(form):\n    \"\"\"휴가 데이터 엑셀 다운로드 (검색 조건 적용)\"\"\"\n    try:\n        # 쿼리 생성\n        query = db.session.query(\n            User.name,\n            User.department,\n            User.position,\n            VacationRequest.start_date,\n            VacationRequest.end_date,\n            VacationRequest.days,\n            VacationRequest.type,\n            VacationRequest.reason,\n            VacationRequest.status,\n            VacationRequest.created_at,\n            VacationRequest.approval_date,\n            User.username\n        ).join(User, User.id == VacationRequest.user_id)\n        \n        # 검색 조건 적용 (엑셀 출력용)\n        \n        # 1. 년도/월 검색 (우선순위 높음)\n        if hasattr(form, 'year') and form.year.data and form.year.data != 0:\n            from sqlalchemy import func\n            query = query.filter(func.strftime('%Y', VacationRequest.start_date) == str(form.year.data))\n            \n            # 월이 선택된 경우 해당 월만 검색\n            if hasattr(form, 'month') and form.month.data and form.month.data != 0:\n                month_str = f'{form.month.data:02d}'  # 01, 02, ..., 12 형식\n                query = query.filter(func.strftime('%m', VacationRequest.start_date) == month_str)\n        \n        # 2. 기간 검색 (년도가 선택되지 않은 경우에만 적용)\n        elif (hasattr(form, 'start_date') and form.start_date.data) or (hasattr(form, 'end_date') and form.end_date.data):\n            if hasattr(form, 'start_date') and form.start_date.data:\n                query = query.filter(VacationRequest.start_date >= form.start_date.data)\n            if hasattr(form, 'end_date') and form.end_date.data:\n                query = query.filter(VacationRequest.end_date <= form.end_date.data)\n        \n        # 3. 직원명 검색 (선택사항)\n        if hasattr(form, 'employee_name') and form.employee_name.data and form.employee_name.data.strip():\n            query = query.filter(User.name.contains(form.employee_name.data.strip()))\n        \n        # 4. 상태 검색\n        if hasattr(form, 'status') and form.status.data != 'all':\n            query = query.filter(VacationRequest.status == form.status.data)\n        \n        # 5. 부서 검색\n        if hasattr(form, 'department') and form.department.data != 'all':\n            query = query.filter(User.department == form.department.data)\n        \n        # 정렬\n        query = query.order_by(VacationRequest.created_at.desc())\n        \n        # 결과 가져오기\n        results = query.all()\n        \n        if not results:\n            # 데이터가 없는 경우 빈 엑셀 파일 생성\n            data = [{'메시지': '검색 조건에 맞는 휴가 데이터가 없습니다.'}]\n        else:\n            # 엑셀 파일 생성 (pandas 이용)\n            data = []\n            for row in results:\n                data.append({\n                    '이름': row.name,\n                    '아이디': row.username,\n                    '부서': row.department or '',\n                    '직급': row.position or '',\n                    '휴가시작일': row.start_date.strftime('%Y-%m-%d'),\n                    '휴가종료일': row.end_date.strftime('%Y-%m-%d'),\n                    '휴가일수': float(row.days),\n                    '휴가유형': row.type,\n                    '휴가사유': row.reason or '',\n                    '상태': row.status,\n                    '신청일시': row.created_at.strftime('%Y-%m-%d %H:%M:%S'),\n                    '승인일시': row.approval_date.strftime('%Y-%m-%d %H:%M:%S') if row.approval_date else ''\n                })\n        \n        # DataFrame 생성\n        df = pd.DataFrame(data)\n        \n        # 파일명 생성\n        current_time = datetime.now().strftime('%Y%m%d_%H%M%S')\n        filename = f'vacation_data_{current_time}.xlsx'\n        \n        # BytesIO를 사용하여 메모리에서 엑셀 파일 생성\n        output = io.BytesIO()\n        with pd.ExcelWriter(output, engine='openpyxl') as writer:\n            df.to_excel(writer, index=False, sheet_name='휴가현황')\n        \n        output.seek(0)\n        excel_data = output.getvalue()\n        \n        # 응답 생성\n        response = make_response(excel_data)\n        response.headers['Content-Type'] = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n        response.headers['Content-Disposition'] = f'attachment; filename=\"{filename}\"'\n        \n        return response\n        \n    except Exception as e:\n        flash(f'엑셀 다운로드 중 오류가 발생했습니다: {str(e)}', 'danger')\n        return redirect(url_for('admin.manage_vacations'))\n\n\n@admin_bp.route('/vacation/<int:request_id>/delete', methods=['POST'])\n@login_required\n@admin_required\ndef delete_vacation_request(request_id):\n    \"\"\"휴가 신청 삭제\"\"\"\n    vacation_request = VacationRequest.query.get_or_404(request_id)\n    \n    try:\n        # 승인된 휴가인 경우 휴가 일수 복구\n        if vacation_request.status == VacationStatus.APPROVED:\n            year = vacation_request.start_date.year\n            user_vacation_days = VacationDays.query.filter_by(\n                user_id=vacation_request.user_id, \n                year=year\n            ).first()\n            \n            if user_vacation_days:\n                user_vacation_days.used_days = max(0, user_vacation_days.used_days - vacation_request.days)\n        \n        employee_name = vacation_request.user.name\n        vacation_period = f\"{vacation_request.start_date.strftime('%Y-%m-%d')} ~ {vacation_request.end_date.strftime('%Y-%m-%d')}\"\n        \n        db.session.delete(vacation_request)\n        db.session.commit()\n        \n        flash(f'{employee_name}님의 휴가 신청({vacation_period})이 삭제되었습니다.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'휴가 신청 삭제 중 오류가 발생했습니다: {str(e)}', 'danger')\n    \n    return redirect(url_for('admin.manage_vacations'))\n\n\n@admin_bp.route('/vacations/export')\n@login_required\n@admin_required\ndef export_vacations():\n    \"\"\"휴가 데이터 엑셀(CSV) 다운로드 (기존 호환성)\"\"\"\n    # 필터링 옵션\n    year = request.args.get('year', datetime.now().year, type=int)\n    status = request.args.get('status', 'all')\n    \n    # 폼 생성 및 데이터 설정\n    form = VacationSearchForm()\n    if year != datetime.now().year:\n        form.year.data = year\n    if status != 'all':\n        form.status.data = status\n    \n    return export_vacation_data(form)\n\n@admin_bp.route('/holidays', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef manage_holidays():\n    \"\"\"공휴일 관리 페이지\"\"\"\n    form = HolidayForm()\n    \n    if form.validate_on_submit():\n        # 중복 확인\n        existing = Holiday.query.filter_by(date=form.date.data).first()\n        if existing:\n            flash(f'{form.date.data.strftime(\"%Y-%m-%d\")}는 이미 {existing.name}으로 등록되어 있습니다.', 'warning')\n        else:\n            holiday = Holiday(\n                date=form.date.data,\n                name=form.name.data\n            )\n            db.session.add(holiday)\n            db.session.commit()\n            flash('공휴일이 등록되었습니다.', 'success')\n            return redirect(url_for('admin.manage_holidays'))\n    \n    # 연도별 공휴일 목록\n    year = request.args.get('year', datetime.now().year, type=int)\n    holidays = Holiday.query.filter(\n        db.extract('year', Holiday.date) == year\n    ).order_by(Holiday.date).all()\n    \n    return render_template(\n        'admin/manage_holidays.html',\n        form=form,\n        holidays=holidays,\n        year=year\n    )\n\n@admin_bp.route('/holidays/delete/<int:holiday_id>', methods=['POST'])\n@login_required\n@admin_required\ndef delete_holiday(holiday_id):\n    \"\"\"공휴일 삭제\"\"\"\n    holiday = Holiday.query.get_or_404(holiday_id)\n    db.session.delete(holiday)\n    db.session.commit()\n    flash('공휴일이 삭제되었습니다.', 'success')\n    return redirect(url_for('admin.manage_holidays'))\n\n\n@admin_bp.route('/certificates')\n@login_required\n@admin_required\ndef manage_certificates():\n    \"\"\"재직증명서 관리 페이지\"\"\"\n    status_filter = request.args.get('status', 'all')\n    \n    # 기본 쿼리\n    query = db.session.query(\n        EmploymentCertificate,\n        User.name,\n        User.department,\n        User.position\n    ).join(User, User.id == EmploymentCertificate.user_id)\n    \n    # 상태 필터링\n    if status_filter != 'all':\n        query = query.filter(EmploymentCertificate.status == status_filter)\n    \n    # 정렬 (최신순)\n    certificates = query.order_by(EmploymentCertificate.created_at.desc()).all()\n    \n    # 관리자 직접 발행 폼\n    issue_form = AdminCertificateIssueForm()\n    \n    # 직원 목록 (관리자 제외)\n    employees = User.query.filter_by(role=Role.EMPLOYEE).order_by(User.name).all()\n    issue_form.user_id.choices = [(emp.id, f\"{emp.name} ({emp.department or '미지정'})\") for emp in employees]\n    \n    return render_template(\n        'admin/manage_certificates.html',\n        certificates=certificates,\n        status_filter=status_filter,\n        issue_form=issue_form\n    )\n\n\n@admin_bp.route('/certificates/direct-issue', methods=['POST'])\n@login_required\n@admin_required\ndef direct_issue_certificate():\n    \"\"\"관리자 직접 증명서 발행\"\"\"\n    form = AdminCertificateIssueForm()\n    \n    # 직원 목록 설정\n    employees = User.query.filter_by(role=Role.EMPLOYEE).order_by(User.name).all()\n    form.user_id.choices = [(emp.id, f\"{emp.name} ({emp.department or '미지정'})\") for emp in employees]\n    \n    if form.validate_on_submit():\n        # 직원 정보 확인\n        employee = User.query.get(form.user_id.data)\n        if not employee or employee.role != Role.EMPLOYEE:\n            flash('유효하지 않은 직원입니다.', 'danger')\n            return redirect(url_for('admin.manage_certificates'))\n        \n        # 증명서 즉시 발급\n        certificate = EmploymentCertificate(\n            user_id=employee.id,\n            purpose=form.purpose.data,\n            status=CertificateStatus.ISSUED,  # 즉시 발급완료 상태\n            comments=form.comments.data or f\"관리자({current_user.name})가 직접 발급\",\n            approved_by=current_user.id,\n            approval_date=datetime.now(),\n            issued_date=datetime.now().date()\n        )\n        \n        db.session.add(certificate)\n        db.session.commit()\n        \n        flash(f'{employee.name} 직원의 재직증명서가 즉시 발급되었습니다.', 'success')\n        return redirect(url_for('admin.manage_certificates'))\n    \n    # 폼 에러가 있는 경우\n    for field, errors in form.errors.items():\n        for error in errors:\n            flash(f'{form[field].label.text}: {error}', 'danger')\n    \n    return redirect(url_for('admin.manage_certificates'))\n\n\n@admin_bp.route('/certificates/<int:certificate_id>', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef process_certificate(certificate_id):\n    \"\"\"재직증명서 승인/반려 처리\"\"\"\n    certificate = EmploymentCertificate.query.get_or_404(certificate_id)\n    form = CertificateApprovalForm()\n    \n    if form.validate_on_submit():\n        certificate.status = form.status.data\n        certificate.comments = form.comments.data\n        certificate.approved_by = current_user.id\n        certificate.approval_date = datetime.now()\n        \n        # 발급완료일 경우 발급일 기록\n        if form.status.data == CertificateStatus.ISSUED:\n            certificate.issued_date = datetime.now().date()\n        \n        db.session.commit()\n        flash('재직증명서 요청이 처리되었습니다.', 'success')\n        return redirect(url_for('admin.manage_certificates'))\n    \n    # GET 요청 처리\n    form.certificate_id.data = certificate_id\n    \n    # 신청자 정보 조회\n    user = User.query.get(certificate.user_id)\n    \n    return render_template(\n        'admin/process_certificate.html',\n        form=form,\n        certificate=certificate,\n        user=user\n    )\n\n\n@admin_bp.route('/certificates/<int:certificate_id>/download')\n@login_required\n@admin_required\ndef download_certificate(certificate_id):\n    \"\"\"재직증명서 PDF 다운로드\"\"\"\n    certificate = EmploymentCertificate.query.get_or_404(certificate_id)\n    \n    # 발급완료 상태만 다운로드 가능\n    if certificate.status != CertificateStatus.ISSUED:\n        flash('발급완료된 증명서만 다운로드할 수 있습니다.', 'warning')\n        return redirect(url_for('admin.manage_certificates'))\n    \n    # 직원 정보 조회\n    employee = User.query.get(certificate.user_id)\n    if not employee:\n        flash('직원 정보를 찾을 수 없습니다.', 'danger')\n        return redirect(url_for('admin.manage_certificates'))\n    \n    # 회사 정보 조회\n    company_info = CompanyInfo.query.first()\n    if not company_info:\n        # 기본 회사 정보 설정\n        company_info = CompanyInfo(\n            name=\"에스에스전력 주식회사\",\n            ceo_name=\"이상진\",\n            registration_number=\"123-45-67890\",\n            address=\"서울특별시 강남구 테헤란로 123\",\n            phone=\"02-1234-5678\",\n            fax=\"02-1234-5679\"\n        )\n    \n    try:\n        # PDF 생성\n        pdf_buffer = generate_certificate_pdf(certificate, employee, company_info)\n        \n        # 파일명 생성\n        filename = f\"재직증명서_{employee.name}_{certificate.issued_date.strftime('%Y%m%d')}.docx\"\n        \n        return send_file(\n            pdf_buffer,\n            as_attachment=True,\n            download_name=filename,\n            mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n        )\n    \n    except Exception as e:\n        flash(f'문서 생성 중 오류가 발생했습니다: {str(e)}', 'danger')\n        return redirect(url_for('admin.manage_certificates'))\n\n\ndef generate_certificate_pdf(certificate, employee, company_info):\n    \"\"\"재직증명서 Word 문서 생성\"\"\"\n    \n    # Word 문서 생성\n    doc = Document()\n    \n    # 페이지 여백 설정 (A4 용지에 맞게 - 여백 줄임)\n    sections = doc.sections\n    for section in sections:\n        section.top_margin = Cm(1.5)\n        section.bottom_margin = Cm(1.5)\n        section.left_margin = Cm(2.0)\n        section.right_margin = Cm(2.0)\n    \n    # 제목 (24pt)\n    title_para = doc.add_paragraph()\n    title_para.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    title_run = title_para.add_run('재 직 증 명 서')\n    title_run.font.name = '맑은 고딕'\n    title_run.font.size = Inches(0.33)  # 24pt\n    title_run.bold = True\n    \n    # 제목 아래 공백 더 줄임\n    para = doc.add_paragraph()\n    para.space_after = 0\n    \n    # 직원 정보 테이블\n    table = doc.add_table(rows=4, cols=2)\n    table.style = 'Table Grid'\n    \n    # 테이블 내용\n    table_data = [\n        ('성    명', employee.name or ''),\n        ('부    서', employee.department or '미지정'),\n        ('직    급', employee.position or '미지정'),\n        ('입 사 일', employee.hire_date.strftime('%Y년 %m월 %d일') if employee.hire_date else '정보없음')\n    ]\n    \n    for i, (label, value) in enumerate(table_data):\n        row = table.rows[i]\n        row.height = Cm(0.8)  # 행 높이 설정 (컴팩트하게)\n        row.cells[0].text = label\n        row.cells[1].text = value\n        \n        # 셀 스타일링\n        for cell in row.cells:\n            for paragraph in cell.paragraphs:\n                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER\n                paragraph.space_after = 0  # 문단 간격 제거\n                for run in paragraph.runs:\n                    run.font.name = '맑은 고딕'\n                    run.font.size = Inches(0.125)  # 테이블 폰트 크기 조정\n    \n    # 테이블 아래 공백 더 줄임\n    para = doc.add_paragraph()\n    para.space_after = 0\n    \n    # 증명 내용 - 첨부파일과 동일한 형식\n    content_para = doc.add_paragraph()\n    content_para.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    content_para.space_after = 0\n    content_run = content_para.add_run('위 사람은 본 회사의 직원으로 재직 중임을 증명합니다.')\n    content_run.font.name = '맑은 고딕'\n    content_run.font.size = Inches(0.125)  # 약 9pt\n    \n    # 공백 추가\n    para = doc.add_paragraph()\n    para.space_after = 0\n    \n    # 사용목적 - 첨부파일과 동일한 형식\n    purpose_para = doc.add_paragraph()\n    purpose_para.alignment = WD_ALIGN_PARAGRAPH.LEFT\n    purpose_para.space_after = 0\n    purpose_run = purpose_para.add_run(f'사용목적: {certificate.purpose}')\n    purpose_run.font.name = '맑은 고딕'\n    purpose_run.font.size = Inches(0.125)  # 약 9pt\n    \n    # 제한사항\n    limit_para = doc.add_paragraph()\n    limit_para.alignment = WD_ALIGN_PARAGRAPH.LEFT\n    limit_para.space_after = 0\n    limit_run = limit_para.add_run(f'본 증명서는 {certificate.purpose}에 한하여 사용되며, 다른 용도로 사용할 수 없습니다.')\n    limit_run.font.name = '맑은 고딕'\n    limit_run.font.size = Inches(0.125)  # 약 9pt\n    \n    # 발급일 위 공백 2칸\n    doc.add_paragraph()\n    doc.add_paragraph()\n    \n    # 발급일 - 첨부파일과 동일한 위치\n    date_para = doc.add_paragraph()\n    date_para.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    date_para.space_after = 0\n    date_run = date_para.add_run(f'발급일: {certificate.issued_date.strftime(\"%Y년 %m월 %d일\")}')\n    date_run.font.name = '맑은 고딕'\n    date_run.font.size = Inches(0.14)  # 10pt\n    \n    # 회사명 위 공백 2칸\n    doc.add_paragraph()\n    doc.add_paragraph()\n    \n    # 회사명 - 위치 조정\n    company_para = doc.add_paragraph()\n    company_para.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    company_para.space_after = 0\n    company_run = company_para.add_run('주식회사 에스에스전력')\n    company_run.font.name = '맑은 고딕'\n    company_run.font.size = Inches(0.21)  # 15pt\n    company_run.bold = True\n    \n    # 대표이사 정보 - 도장 이미지 제거\n    ceo_para = doc.add_paragraph()\n    ceo_para.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    ceo_para.space_after = 0\n    \n    ceo_run = ceo_para.add_run('대표이사: 김세인')\n    ceo_run.font.name = '맑은 고딕'\n    ceo_run.font.size = Inches(0.19)  # 14pt\n    \n    # 회사 연락처 위 공백 추가\n    doc.add_paragraph()\n    \n    # 회사 연락처\n    contact_para = doc.add_paragraph()\n    contact_para.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    contact_para.space_after = 0\n    \n    if company_info.address and company_info.phone:\n        contact_run = contact_para.add_run(f'{company_info.address} TEL: {company_info.phone}')\n        contact_run.font.name = '맑은 고딕'\n        contact_run.font.size = Inches(0.15)  # 11pt\n    \n    # 바코드 추가 - 전자문서 표시 제거\n    para = doc.add_paragraph()\n    para.space_after = 0\n    \n    # 바코드 생성 및 추가\n    try:\n        import barcode\n        from barcode.writer import ImageWriter\n        from PIL import Image\n        \n        # 증명서 고유 ID로 바코드 생성\n        barcode_data = f\"CERT-{certificate.id}-{certificate.issued_date.strftime('%Y%m%d')}\"\n        \n        # Code128 바코드 생성\n        code128 = barcode.get_barcode_class('code128')\n        barcode_instance = code128(barcode_data, writer=ImageWriter())\n        \n        # 임시 파일로 바코드 이미지 저장\n        import tempfile\n        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:\n            barcode_instance.save(tmp_file.name)\n            \n            # Word 문서에 바코드 이미지 추가 - 크기 줄임\n            barcode_para = doc.add_paragraph()\n            barcode_para.alignment = WD_ALIGN_PARAGRAPH.CENTER\n            barcode_run = barcode_para.add_run()\n            barcode_run.add_picture(tmp_file.name + '.png', width=Inches(2.0), height=Inches(0.6))\n            \n            # 임시 파일 삭제\n            import os\n            os.unlink(tmp_file.name + '.png')\n            \n    except Exception as e:\n        # 바코드 생성 실패 시 아무것도 추가하지 않음\n        pass\n    \n    # 메모리 버퍼에 저장\n    buffer = io.BytesIO()\n    doc.save(buffer)\n    buffer.seek(0)\n    \n    return buffer\n\n\n@admin_bp.route('/employees/<int:user_id>/vacation-report')\n@login_required\n@admin_required\ndef employee_vacation_report(user_id):\n    \"\"\"직원별 휴가 사용 보고서\"\"\"\n    user = User.query.get_or_404(user_id)\n    \n    # 관리자는 보고서를 볼 수 없음\n    if user.role == Role.ADMIN:\n        flash('관리자 계정의 휴가 보고서는 조회할 수 없습니다.', 'danger')\n        return redirect(url_for('admin.manage_employees'))\n    \n    # 연도별 휴가 데이터 조회 (최근 3년)\n    current_year = datetime.now().year\n    years_data = []\n    \n    for year in range(current_year - 2, current_year + 1):\n        # VacationDays 데이터 조회\n        vacation_days = VacationDays.query.filter_by(user_id=user.id, year=year).first()\n        \n        # 해당 연도 휴가 신청 내역\n        from sqlalchemy import func\n        vacation_requests = VacationRequest.query.filter(\n            VacationRequest.user_id == user.id,\n            func.strftime('%Y', VacationRequest.start_date) == str(year)\n        ).order_by(VacationRequest.start_date).all()\n        \n        # 승인된 휴가 총 일수\n        approved_days = sum(req.days for req in vacation_requests if req.status == '승인됨')\n        \n        # 실시간 잔여 휴가 계산\n        from utils import calculate_remaining_vacation_days\n        remaining_days = calculate_remaining_vacation_days(user.id, year)\n        \n        years_data.append({\n            'year': year,\n            'vacation_days': vacation_days,\n            'vacation_requests': vacation_requests,\n            'approved_days': approved_days,\n            'remaining_days': remaining_days,\n            'total_days': vacation_days.total_days if vacation_days else 15\n        })\n    \n    return render_template(\n        'admin/employee_vacation_report.html',\n        user=user,\n        years_data=years_data,\n        current_year=current_year\n    )\n\n\n@admin_bp.route('/employees/<int:user_id>/vacation-report/export')\n@login_required\n@admin_required\ndef export_employee_vacation_report(user_id):\n    \"\"\"직원별 휴가 보고서 엑셀 출력\"\"\"\n    user = User.query.get_or_404(user_id)\n    \n    if user.role == Role.ADMIN:\n        flash('관리자 계정의 휴가 보고서는 출력할 수 없습니다.', 'danger')\n        return redirect(url_for('admin.manage_employees'))\n    \n    # 데이터 준비\n    current_year = datetime.now().year\n    all_requests = []\n    \n    # 최근 3년간 휴가 신청 내역\n    from sqlalchemy import func\n    vacation_requests = VacationRequest.query.filter(\n        VacationRequest.user_id == user.id,\n        func.strftime('%Y', VacationRequest.start_date).between(str(current_year - 2), str(current_year))\n    ).order_by(VacationRequest.start_date).all()\n    \n    for req in vacation_requests:\n        all_requests.append({\n            '연도': req.start_date.year,\n            '신청일': req.created_at.strftime('%Y-%m-%d'),\n            '시작일': req.start_date.strftime('%Y-%m-%d'),\n            '종료일': req.end_date.strftime('%Y-%m-%d'),\n            '일수': req.days,\n            '휴가종류': req.type,\n            '사유': req.reason or '-',\n            '상태': req.status,\n            '승인일': req.approval_date.strftime('%Y-%m-%d') if req.approval_date else '-',\n            '승인자': req.approver.name if req.approver else '-'\n        })\n    \n    # DataFrame 생성\n    df = pd.DataFrame(all_requests)\n    \n    # 엑셀 파일 생성\n    output = io.BytesIO()\n    with pd.ExcelWriter(output, engine='openpyxl') as writer:\n        # 상세 내역 시트\n        df.to_excel(writer, sheet_name='휴가신청내역', index=False)\n        \n        # 연도별 요약 시트\n        summary_data = []\n        for year in range(current_year - 2, current_year + 1):\n            vacation_days = VacationDays.query.filter_by(user_id=user.id, year=year).first()\n            year_requests = [req for req in vacation_requests if req.start_date.year == year]\n            approved_days = sum(req.days for req in year_requests if req.status == '승인됨')\n            \n            from utils import calculate_remaining_vacation_days\n            remaining_days = calculate_remaining_vacation_days(user.id, year)\n            \n            summary_data.append({\n                '연도': year,\n                '총휴가일수': vacation_days.total_days if vacation_days else 15,\n                '사용일수': approved_days,\n                '잔여일수': remaining_days,\n                '신청건수': len(year_requests),\n                '승인건수': len([req for req in year_requests if req.status == '승인됨']),\n                '대기건수': len([req for req in year_requests if req.status == '대기중']),\n                '반려건수': len([req for req in year_requests if req.status == '반려됨'])\n            })\n        \n        summary_df = pd.DataFrame(summary_data)\n        summary_df.to_excel(writer, sheet_name='연도별요약', index=False)\n    \n    output.seek(0)\n    \n    # 파일명 생성\n    filename = f\"{user.name}_휴가보고서_{datetime.now().strftime('%Y%m%d')}.xlsx\"\n    \n    return send_file(\n        output,\n        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        as_attachment=True,\n        download_name=filename\n    )\n\n\n@admin_bp.route('/employees/delete/<int:user_id>', methods=['POST'])\n@login_required\n@admin_required\ndef delete_employee(user_id):\n    \"\"\"직원 삭제\"\"\"\n    user = User.query.get_or_404(user_id)\n    \n    # 관리자는 삭제할 수 없음\n    if user.role == Role.ADMIN:\n        flash('관리자 계정은 삭제할 수 없습니다.', 'danger')\n        return redirect(url_for('admin.manage_employees'))\n    \n    # 사용자 정보 미리 저장\n    user_name = user.name\n    \n    try:\n        # 휴가 데이터 삭제\n        VacationDays.query.filter_by(user_id=user.id).delete()\n        # 휴가 신청 삭제\n        VacationRequest.query.filter_by(user_id=user.id).delete()\n        # 재직증명서 신청 삭제\n        EmploymentCertificate.query.filter_by(user_id=user.id).delete()\n        \n        # 사용자 삭제\n        db.session.delete(user)\n        db.session.commit()\n        \n        flash(f'{user_name} 직원이 성공적으로 삭제되었습니다.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'직원 삭제 중 오류가 발생했습니다: {str(e)}', 'danger')\n        \n    return redirect(url_for('admin.manage_employees'))\n\n\n@admin_bp.route('/company-info', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef manage_company_info():\n    \"\"\"회사 정보 관리 페이지\"\"\"\n    # 회사 정보 가져오기 (없으면 빈 객체 생성)\n    company_info = CompanyInfo.query.first()\n    form = CompanyInfoForm()\n    \n    if form.validate_on_submit():\n        # 회사 정보가 없으면 새로 생성\n        if not company_info:\n            company_info = CompanyInfo()\n            db.session.add(company_info)\n        \n        # 폼 데이터 할당\n        company_info.name = form.name.data\n        company_info.ceo_name = form.ceo_name.data\n        company_info.registration_number = form.registration_number.data\n        company_info.address = form.address.data\n        company_info.phone = form.phone.data\n        company_info.fax = form.fax.data\n        company_info.website = form.website.data\n        company_info.stamp_image = form.stamp_image.data\n        \n        db.session.commit()\n        flash('회사 정보가 성공적으로 저장되었습니다.', 'success')\n        return redirect(url_for('admin.manage_company_info'))\n    \n    # GET 요청 처리 또는 폼 초기화\n    if company_info:\n        form.name.data = company_info.name\n        form.ceo_name.data = company_info.ceo_name\n        form.registration_number.data = company_info.registration_number\n        form.address.data = company_info.address\n        form.phone.data = company_info.phone\n        form.fax.data = company_info.fax\n        form.website.data = company_info.website\n        form.stamp_image.data = company_info.stamp_image\n    \n    return render_template(\n        'admin/manage_company_info.html',\n        form=form,\n        company_info=company_info\n    )\n\n\n@admin_bp.route('/employees/hire-date', methods=['GET', 'POST'])\n@login_required\n@admin_required\ndef set_hire_date():\n    \"\"\"직원 입사일 설정\"\"\"\n    form = EmployeeHireDateForm()\n    \n    if form.validate_on_submit():\n        user_id = form.user_id.data\n        hire_date = form.hire_date.data\n        \n        # 해당 직원 정보 가져오기\n        user = User.query.get_or_404(user_id)\n        \n        # 입사일 업데이트\n        user.hire_date = hire_date\n        db.session.commit()\n        \n        flash(f'직원 {user.name}의 입사일이 설정되었습니다.', 'success')\n        return redirect(url_for('admin.manage_employees'))\n    \n    # GET 요청 처리\n    user_id = request.args.get('user_id', type=int)\n    \n    if user_id:\n        user = User.query.get_or_404(user_id)\n        form.user_id.data = user_id\n        \n        # 기존 입사일 있으면 폼에 설정\n        if user.hire_date:\n            form.hire_date.data = user.hire_date\n        \n        return render_template(\n            'admin/set_hire_date.html',\n            form=form,\n            user=user\n        )\n    \n    return redirect(url_for('admin.manage_employees'))\n\n\n@admin_bp.route('/certificates/<int:certificate_id>/delete', methods=['POST'])\n@login_required\n@admin_required\ndef delete_certificate(certificate_id):\n    \"\"\"증명서 발급 기록 삭제\"\"\"\n    certificate = EmploymentCertificate.query.get_or_404(certificate_id)\n    \n    try:\n        employee_name = certificate.user.name\n        purpose = certificate.purpose\n        \n        db.session.delete(certificate)\n        db.session.commit()\n        \n        flash(f'{employee_name}님의 재직증명서 발급 기록({purpose})이 삭제되었습니다.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'증명서 삭제 중 오류가 발생했습니다: {str(e)}', 'danger')\n    \n    return redirect(url_for('admin.manage_certificates'))\n","size_bytes":54495},"app.py":{"content":"import os\nimport logging\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nfrom flask_login import LoginManager\n\n# 로깅 설정\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\n\ndb = SQLAlchemy(model_class=Base)\n# Flask 앱 생성\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev-secret-key\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)  # url_for가 https를 생성하도록 필요\n\n# 데이터베이스 설정\n# PostgreSQL 우선, 연결 실패 시 영구 SQLite 폴백\ndatabase_url = os.environ.get(\"DATABASE_URL\")\n\nif database_url:\n    # PostgreSQL URL 변환\n    if database_url.startswith(\"postgres://\"):\n        database_url = database_url.replace(\"postgres://\", \"postgresql://\", 1)\n    \n    # PostgreSQL 연결 테스트\n    if \"postgresql://\" in database_url:\n        try:\n            import psycopg2\n            from urllib.parse import urlparse\n            \n            result = urlparse(database_url)\n            conn = psycopg2.connect(\n                database=result.path[1:],\n                user=result.username,\n                password=result.password,\n                host=result.hostname,\n                port=result.port\n            )\n            conn.close()\n            print(\"✅ PostgreSQL 데이터베이스 연결 성공\")\n        except Exception as e:\n            print(f\"❌ PostgreSQL 연결 실패: {e}\")\n            print(\"📁 영구 SQLite 데이터베이스로 폴백합니다\")\n            # 영구 저장을 위해 절대 경로 사용\n            import os\n            db_dir = os.path.abspath(\"instance\")\n            os.makedirs(db_dir, exist_ok=True)\n            database_url = f\"sqlite:///{db_dir}/vacation_permanent.db\"\nelse:\n    # 개발환경: 영구 SQLite 사용\n    print(\"🔧 개발 환경: 영구 SQLite 데이터베이스 사용\")\n    import os\n    db_dir = os.path.abspath(\"instance\")\n    os.makedirs(db_dir, exist_ok=True)\n    database_url = f\"sqlite:///{db_dir}/vacation_permanent.db\"\n\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = database_url\nprint(f\"🗄️  데이터베이스: {database_url}\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n    \"pool_size\": 10,  # 연결 풀 크기 증가\n    \"max_overflow\": 20,  # 최대 오버플로우 연결\n}\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n\n# 성능 최적화 설정\napp.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = 31536000  # 정적 파일 캐시 1년\napp.config[\"PERMANENT_SESSION_LIFETIME\"] = 1800  # 세션 30분\n\n# 데이터베이스 초기화\ndb.init_app(app)\n\n# 로그인 매니저 설정\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'auth.login'\nlogin_manager.login_message = '이 페이지에 접근하려면 로그인이 필요합니다.'\nlogin_manager.login_message_category = 'warning'\n\nwith app.app_context():\n    # 모델 임포트\n    import models  # noqa: F401\n    \n    # 데이터베이스 테이블 생성\n    db.create_all()\n    \n    # 초기 데이터 설정 (관리자 계정 및 공휴일)\n    try:\n        from models import User, Role\n        from holidays import add_korean_holidays\n        from datetime import datetime\n        \n        # 관리자 계정 생성 (없을 경우에만)\n        existing_admin = User.query.filter_by(username='admin').first()\n        if not existing_admin:\n            from models import VacationDays\n            from werkzeug.security import generate_password_hash\n            \n            admin = User(\n                username='admin',\n                email='admin@example.com',\n                name='관리자',\n                role=Role.ADMIN,\n                department='경영지원팀',\n                position='관리자',\n                created_at=datetime.now()\n            )\n            admin.set_password('admin123')\n            db.session.add(admin)\n            db.session.commit()\n            \n            # 관리자 휴가일수 설정\n            vacation_days = VacationDays(\n                user_id=admin.id,\n                year=datetime.now().year,\n                total_days=15,\n                used_days=0\n            )\n            db.session.add(vacation_days)\n            db.session.commit()\n            print(\"✅ 관리자 계정 생성 완료 (admin/admin123)\")\n        \n        # 공휴일 등록 (2025, 2026년)\n        from models import Holiday\n        existing_holidays = Holiday.query.filter(db.extract('year', Holiday.date) == 2025).first()\n        if not existing_holidays:\n            add_korean_holidays(2025)\n            add_korean_holidays(2026)\n            print(\"✅ 공휴일 데이터 등록 완료 (2025-2026)\")\n            \n    except Exception as e:\n        print(f\"⚠️ 초기 데이터 설정 중 오류: {e}\")\n    \n    # 라우트 등록\n    from auth import auth_bp\n    from admin import admin_bp\n    from employee import employee_bp\n    from routes import main_bp\n    \n    app.register_blueprint(auth_bp)\n    app.register_blueprint(admin_bp, url_prefix='/admin')\n    app.register_blueprint(employee_bp, url_prefix='/employee')\n    app.register_blueprint(main_bp)\n    \n    # User 로더 설정\n    from models import User\n    \n    @login_manager.user_loader\n    def load_user(user_id):\n        return User.query.get(int(user_id))\n","size_bytes":5430},"auth.py":{"content":"from flask import Blueprint, render_template, redirect, url_for, flash, request\nfrom flask_login import login_user, logout_user, current_user, login_required\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom app import db\nfrom models import User, Role, VacationDays\nfrom forms import LoginForm, RegisterForm, FindIdForm, FindPasswordForm, ResetPasswordForm\nimport secrets\nimport string\nfrom datetime import datetime\n\nauth_bp = Blueprint('auth', __name__)\n\n@auth_bp.route('/login', methods=['GET', 'POST'])\ndef login():\n    \"\"\"로그인 페이지\"\"\"\n    # 이미 로그인한 사용자는 대시보드로 리디렉션\n    if current_user.is_authenticated:\n        return redirect(url_for('main.dashboard'))\n    \n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.username.data).first()\n        \n        if user and user.check_password(form.password.data):\n            login_user(user)\n            flash('로그인되었습니다.', 'success')\n            \n            # 요청한 페이지로 리디렉션, 없으면 대시보드로\n            next_page = request.args.get('next')\n            return redirect(next_page or url_for('main.dashboard'))\n        \n        flash('아이디 또는 비밀번호가 잘못되었습니다.', 'danger')\n    \n    return render_template('login_gov.html', form=form)\n\n@auth_bp.route('/register', methods=['GET', 'POST'])\ndef register():\n    \"\"\"회원가입 페이지\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('main.dashboard'))\n    \n    form = RegisterForm()\n    if form.validate_on_submit():\n        # 아이디 중복 확인\n        if User.query.filter_by(username=form.username.data).first():\n            flash('이미 사용 중인 아이디입니다.', 'danger')\n            return render_template('register_gov.html', form=form)\n        \n        # 이메일 중복 확인\n        if User.query.filter_by(email=form.email.data).first():\n            flash('이미 사용 중인 이메일입니다.', 'danger')\n            return render_template('register_gov.html', form=form)\n        \n        # 첫 번째 사용자는 관리자로 설정\n        role = Role.EMPLOYEE\n        if User.query.count() == 0:\n            role = Role.ADMIN\n        \n        # 사용자 생성\n        new_user = User(\n            username=form.username.data,\n            email=form.email.data,\n            name=form.name.data,\n            resident_id_first=form.resident_id_first.data,\n            resident_id_last_digit=form.resident_id_last_digit.data,\n            department=form.department.data,\n            position=form.position.data,\n            role=role\n        )\n        new_user.set_password(form.password.data)\n        \n        db.session.add(new_user)\n        db.session.commit()\n        \n        # 현재 연도의 휴가 일수 생성\n        current_year = datetime.now().year\n        vacation_days = VacationDays(\n            user_id=new_user.id,\n            year=current_year,\n            total_days=15,  # 기본 15일\n            used_days=0\n        )\n        db.session.add(vacation_days)\n        db.session.commit()\n        \n        flash('회원가입이 완료되었습니다. 로그인해주세요.', 'success')\n        return redirect(url_for('auth.login'))\n    \n    return render_template('register_gov.html', form=form)\n\n@auth_bp.route('/logout')\n@login_required\ndef logout():\n    \"\"\"로그아웃\"\"\"\n    logout_user()\n    flash('로그아웃되었습니다.', 'info')\n    return redirect(url_for('auth.login'))\n\n\ndef generate_temp_password(length=8):\n    \"\"\"임시 비밀번호 생성\"\"\"\n    characters = string.ascii_letters + string.digits\n    return ''.join(secrets.choice(characters) for _ in range(length))\n\n\n@auth_bp.route('/find-id', methods=['GET', 'POST'])\ndef find_id():\n    \"\"\"아이디 찾기\"\"\"\n    form = FindIdForm()\n    found_username = None\n    \n    if form.validate_on_submit():\n        user = User.query.filter_by(\n            name=form.name.data, \n            email=form.email.data\n        ).first()\n        \n        if user:\n            found_username = user.username\n            flash(f'회원님의 아이디는 \"{found_username}\" 입니다.', 'success')\n        else:\n            flash('입력하신 정보와 일치하는 계정을 찾을 수 없습니다.', 'danger')\n    \n    return render_template('auth/find_id.html', form=form, found_username=found_username)\n\n\n@auth_bp.route('/find-password', methods=['GET', 'POST'])\ndef find_password():\n    \"\"\"비밀번호 찾기 (임시 비밀번호 발급)\"\"\"\n    form = FindPasswordForm()\n    temp_password = None\n    \n    if form.validate_on_submit():\n        user = User.query.filter_by(\n            username=form.username.data,\n            email=form.email.data\n        ).first()\n        \n        if user:\n            # 임시 비밀번호 생성 및 설정\n            temp_password = generate_temp_password()\n            user.set_password(temp_password)\n            db.session.commit()\n            \n            flash(f'임시 비밀번호가 발급되었습니다: {temp_password}', 'success')\n            flash('보안을 위해 로그인 후 반드시 비밀번호를 변경해주세요.', 'warning')\n        else:\n            flash('입력하신 정보와 일치하는 계정을 찾을 수 없습니다.', 'danger')\n    \n    return render_template('auth/find_password.html', form=form, temp_password=temp_password)\n\n\n@auth_bp.route('/reset-password', methods=['GET', 'POST'])\n@login_required\ndef reset_password():\n    \"\"\"비밀번호 재설정\"\"\"\n    form = ResetPasswordForm()\n    \n    if form.validate_on_submit():\n        current_user.set_password(form.new_password.data)\n        db.session.commit()\n        \n        flash('비밀번호가 성공적으로 변경되었습니다.', 'success')\n        return redirect(url_for('main.dashboard'))\n    \n    return render_template('auth/reset_password.html', form=form)\n","size_bytes":5957},"create_admin.py":{"content":"from app import app, db\nfrom models import User, Role, VacationDays\nfrom werkzeug.security import generate_password_hash\nfrom datetime import datetime\n\ndef create_admin_account():\n    \"\"\"관리자 계정 생성\"\"\"\n    with app.app_context():\n        # 이미 admin 계정이 있는지 확인\n        existing_admin = User.query.filter_by(username='admin').first()\n        if existing_admin:\n            print(\"'admin' 계정이 이미 존재합니다.\")\n            return\n        \n        # 관리자 계정 생성\n        admin = User(\n            username='admin',\n            email='admin@example.com',\n            name='관리자',\n            role=Role.ADMIN,\n            department='경영지원팀',\n            position='관리자',\n            created_at=datetime.now()\n        )\n        \n        # 비밀번호 설정 (기본 비밀번호: admin123)\n        admin.set_password('admin123')\n        \n        # DB에 추가\n        db.session.add(admin)\n        db.session.commit()\n        \n        # 휴가일수 설정 (관리자용 15일)\n        vacation_days = VacationDays(\n            user_id=admin.id,\n            year=datetime.now().year,\n            total_days=15,\n            used_days=0\n        )\n        \n        db.session.add(vacation_days)\n        db.session.commit()\n        \n        print(f\"관리자 계정 생성 완료:\")\n        print(f\"- 사용자명: admin\")\n        print(f\"- 비밀번호: admin123\")\n        print(f\"- 역할: {Role.ADMIN}\")\n        print(f\"- 연도: {datetime.now().year}\")\n        print(f\"- 총 휴가일수: 15일\")\n        print(\"\\n이 계정으로, 로그인 후 다른 사용자의 휴가를 관리할 수 있습니다.\")\n\nif __name__ == \"__main__\":\n    create_admin_account()","size_bytes":1732},"create_employees.py":{"content":"from app import app, db\nfrom models import User, Role, VacationDays\nfrom werkzeug.security import generate_password_hash\nfrom datetime import datetime\n\ndef create_employee_accounts():\n    \"\"\"여러 부서의 직원 계정 생성\"\"\"\n    with app.app_context():\n        # 직원 데이터 - (이름, 아이디, 이메일, 부서, 직급, 휴가일수)\n        employees = [\n            (\"김영희\", \"younghee\", \"younghee@example.com\", \"개발팀\", \"선임연구원\", 15),\n            (\"이철수\", \"chulsoo\", \"chulsoo@example.com\", \"개발팀\", \"주임연구원\", 12),\n            (\"박민지\", \"minji\", \"minji@example.com\", \"마케팅팀\", \"팀장\", 20),\n            (\"정준호\", \"junho\", \"junho@example.com\", \"인사팀\", \"과장\", 17),\n            (\"송지원\", \"jiwon\", \"jiwon@example.com\", \"재무팀\", \"대리\", 15),\n            (\"강현우\", \"hyunwoo\", \"hyunwoo@example.com\", \"영업팀\", \"사원\", 10),\n            (\"황미영\", \"miyoung\", \"miyoung@example.com\", \"고객지원팀\", \"주임\", 13),\n            (\"조민수\", \"minsoo\", \"minsoo@example.com\", \"개발팀\", \"사원\", 10),\n            (\"윤서연\", \"seoyeon\", \"seoyeon@example.com\", \"디자인팀\", \"선임디자이너\", 15),\n            (\"한지훈\", \"jihoon\", \"jihoon@example.com\", \"영업팀\", \"차장\", 18)\n        ]\n        \n        created_count = 0\n        current_year = datetime.now().year\n        \n        # 직원 계정 생성\n        for name, username, email, department, position, vacation_days in employees:\n            # 이미 존재하는 아이디인지 확인\n            existing_user = User.query.filter_by(username=username).first()\n            if existing_user:\n                print(f\"'{username}' 계정이 이미 존재합니다.\")\n                continue\n            \n            # 새 직원 계정 생성\n            employee = User(\n                username=username,\n                email=email,\n                name=name,\n                role=Role.EMPLOYEE,\n                department=department,\n                position=position,\n                created_at=datetime.now()\n            )\n            \n            # 비밀번호 설정 (기본 비밀번호: password123)\n            employee.set_password('password123')\n            \n            # DB에 추가\n            db.session.add(employee)\n            db.session.commit()\n            \n            # 휴가일수 설정\n            vacation_days_entry = VacationDays(\n                user_id=employee.id,\n                year=current_year,\n                total_days=vacation_days,\n                used_days=0\n            )\n            \n            db.session.add(vacation_days_entry)\n            db.session.commit()\n            \n            created_count += 1\n            print(f\"직원 계정 생성: {name} ({username}) - {department} {position}\")\n        \n        print(f\"\\n총 {created_count}개의 직원 계정이 생성되었습니다.\")\n        print(\"모든 직원의 초기 비밀번호는 'password123' 입니다.\")\n\nif __name__ == \"__main__\":\n    create_employee_accounts()","size_bytes":3044},"create_workflow_report.py":{"content":"import docx\nfrom docx.shared import Pt, Cm, RGBColor\nfrom docx.enum.text import WD_ALIGN_PARAGRAPH\nfrom docx.oxml.ns import qn\nfrom docx.oxml import OxmlElement\n\n# 워드 문서 생성\ndoc = docx.Document()\n\n# 문서 여백 설정\nsections = doc.sections\nfor section in sections:\n    section.top_margin = Cm(2.54)\n    section.bottom_margin = Cm(2.54)\n    section.left_margin = Cm(2.54)\n    section.right_margin = Cm(2.54)\n\n# 제목 스타일 설정\ntitle_style = doc.styles['Title']\ntitle_style.font.name = 'HY견고딕'\ntitle_style.font.size = Pt(20)\ntitle_style.font.bold = True\ntitle_style.font.color.rgb = RGBColor(0, 0, 0)\n\n# 제목 추가\ntitle = doc.add_paragraph('에스에스전력 휴가관리시스템 워크플로우 보고서', style='Title')\ntitle.alignment = WD_ALIGN_PARAGRAPH.CENTER\n\n# 날짜 추가\ndate_paragraph = doc.add_paragraph()\ndate_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT\ndate_run = date_paragraph.add_run('2025년 5월 4일')\ndate_run.font.name = 'HY견고딕'\ndate_run.font.size = Pt(10)\n\ndoc.add_paragraph()  # 빈 줄 추가\n\n# 소개 섹션\ndoc.add_heading('1. 개요', level=1)\nintro = doc.add_paragraph()\nintro.add_run('본 보고서는 에스에스전력 휴가관리시스템의 주요 기능 및 워크플로우를 상세히 기술합니다. 이 시스템은 직원들의 휴가 신청 프로세스를 디지털화하고, 관리자의 승인 절차를 효율적으로 관리하며, 재직증명서 발급과 같은 부가 기능을 제공합니다.')\n\n# 시스템 아키텍처 섹션\ndoc.add_heading('2. 시스템 아키텍처', level=1)\narch = doc.add_paragraph()\narch.add_run('에스에스전력 휴가관리시스템은 Python과 Flask 프레임워크를 기반으로 개발된 웹 애플리케이션입니다. 주요 구성요소는 다음과 같습니다:')\n\narch_points = [\n    \"백엔드: Flask 웹 프레임워크를 사용하여 서버 측 로직 구현\",\n    \"데이터베이스: PostgreSQL을 사용한 관계형 데이터베이스 관리\",\n    \"프론트엔드: HTML, CSS, JavaScript, Tailwind CSS를 활용한 반응형 웹 인터페이스\",\n    \"문서 생성: python-docx, reportlab 라이브러리를 통한 문서 생성 및 PDF 변환\",\n    \"인증 및 권한 관리: Flask-Login을 이용한 사용자 인증 및 접근 제어\"\n]\n\narch_list = doc.add_paragraph(style='List Bullet')\nfor point in arch_points:\n    if arch_list.text:  # 이미 내용이 있다면 새로운 항목 추가\n        arch_list = doc.add_paragraph(style='List Bullet')\n    arch_list.add_run(point)\n\n# 데이터베이스 구조\ndoc.add_heading('3. 데이터베이스 구조', level=1)\ndb_intro = doc.add_paragraph()\ndb_intro.add_run('시스템은 다음과 같은 주요 데이터베이스 모델을 사용합니다:')\n\ndb_tables = [\n    {\n        'name': 'User (사용자)',\n        'desc': '직원 및 관리자 계정 정보를 저장합니다.',\n        'fields': [\n            \"id: 사용자 고유 식별자\",\n            \"username: 로그인 아이디\",\n            \"email: 이메일 주소\",\n            \"password_hash: 암호화된 비밀번호\",\n            \"name: 사용자 실명\",\n            \"resident_id_first: 주민번호 앞자리\",\n            \"resident_id_last_digit: 주민번호 뒷자리 첫번째 숫자\",\n            \"role: 역할 (직원/관리자)\",\n            \"department: 부서\",\n            \"position: 직급\",\n            \"hire_date: 입사일\"\n        ]\n    },\n    {\n        'name': 'VacationDays (휴가일수)',\n        'desc': '직원별 연간 휴가 일수를 관리합니다.',\n        'fields': [\n            \"id: 고유 식별자\",\n            \"user_id: 사용자 외래 키\",\n            \"year: 연도\",\n            \"total_days: 총 휴가 일수\",\n            \"used_days: 사용한 휴가 일수\"\n        ]\n    },\n    {\n        'name': 'VacationRequest (휴가신청)',\n        'desc': '직원들의 휴가 신청 정보를 저장합니다.',\n        'fields': [\n            \"id: 고유 식별자\",\n            \"user_id: 신청자 외래 키\",\n            \"start_date: 휴가 시작일\",\n            \"end_date: 휴가 종료일\",\n            \"days: 휴가 일수\",\n            \"reason: 휴가 사유\",\n            \"status: 상태 (대기중/승인됨/반려됨)\",\n            \"type: 휴가 종류 (연차/반차/특별휴가)\",\n            \"approved_by: 승인자 외래 키\",\n            \"approval_date: 승인/반려 날짜\",\n            \"comments: 관리자 코멘트\",\n            \"created_at: 신청 날짜\"\n        ]\n    },\n    {\n        'name': 'EmploymentCertificate (재직증명서)',\n        'desc': '재직증명서 신청 및 발급 정보를 관리합니다.',\n        'fields': [\n            \"id: 고유 식별자\",\n            \"user_id: 신청자 외래 키\",\n            \"purpose: 사용 목적\",\n            \"issued_date: 발급일\",\n            \"status: 상태 (대기중/발급완료/반려됨)\",\n            \"approved_by: 승인자 외래 키\",\n            \"approval_date: 승인/반려 날짜\",\n            \"comments: 관리자 코멘트\",\n            \"created_at: 신청 날짜\"\n        ]\n    },\n    {\n        'name': 'Holiday (공휴일)',\n        'desc': '공휴일 정보를 저장하여 휴가 일수 계산에 활용합니다.',\n        'fields': [\n            \"id: 고유 식별자\",\n            \"date: 공휴일 날짜\",\n            \"name: 공휴일 이름\"\n        ]\n    },\n    {\n        'name': 'CompanyInfo (회사정보)',\n        'desc': '회사 정보를 저장하여, 재직증명서 등에 활용합니다.',\n        'fields': [\n            \"id: 고유 식별자\",\n            \"name: 회사명\",\n            \"ceo_name: 대표자명\",\n            \"registration_number: 사업자등록번호\",\n            \"address: 회사 주소\",\n            \"phone: 전화번호\",\n            \"fax: 팩스번호\",\n            \"website: 웹사이트\",\n            \"stamp_image: 직인 이미지 (base64)\"\n        ]\n    }\n]\n\nfor table in db_tables:\n    table_heading = doc.add_heading(level=2)\n    table_heading.add_run(table['name'])\n    \n    desc = doc.add_paragraph()\n    desc.add_run(table['desc'])\n    \n    for field in table['fields']:\n        field_para = doc.add_paragraph(style='List Bullet')\n        field_para.paragraph_format.left_indent = Pt(20)\n        field_para.add_run(field)\n    \n    doc.add_paragraph()  # 빈 줄 추가\n\n# 주요 기능 및 워크플로우\ndoc.add_heading('4. 주요 기능 및 워크플로우', level=1)\n\nworkflows = [\n    {\n        'name': '4.1 사용자 인증 워크플로우',\n        'steps': [\n            \"사용자가 로그인 페이지 접속\",\n            \"아이디와 비밀번호 입력\",\n            \"서버에서 사용자 정보 검증\",\n            \"역할에 따라 해당 대시보드로 리디렉션 (직원/관리자)\",\n            \"로그인 실패 시 오류 메시지 표시\"\n        ]\n    },\n    {\n        'name': '4.2 휴가 신청 워크플로우',\n        'steps': [\n            \"직원이 휴가 신청 페이지 접속\",\n            \"휴가 유형, 시작일, 종료일, 사유 입력\",\n            \"휴가 일수 자동 계산 (주말, 공휴일 제외)\",\n            \"입력 정보 검증 (남은 휴가 일수 확인, 중복 신청 확인)\",\n            \"휴가 신청 정보 저장\",\n            \"대기 상태로 관리자에게 통보\",\n            \"직원 대시보드에 신청 내역 표시\"\n        ]\n    },\n    {\n        'name': '4.3 휴가 승인 워크플로우',\n        'steps': [\n            \"관리자가 휴가 관리 페이지 접속\",\n            \"대기 중인 휴가 신청 목록 확인\",\n            \"개별 휴가 신청 상세 내용 확인\",\n            \"승인 또는 반려 결정 및 코멘트 입력\",\n            \"승인 시 직원의 사용 휴가 일수 자동 업데이트\",\n            \"처리 결과가 직원의 휴가 내역에 반영\"\n        ]\n    },\n    {\n        'name': '4.4 재직증명서 신청 워크플로우',\n        'steps': [\n            \"직원이 재직증명서 신청 페이지 접속\",\n            \"사용 목적 입력\",\n            \"신청 정보 저장\",\n            \"대기 상태로 관리자에게 통보\",\n            \"직원 대시보드에 신청 내역 표시\"\n        ]\n    },\n    {\n        'name': '4.5 재직증명서 발급 워크플로우',\n        'steps': [\n            \"관리자가 재직증명서 관리 페이지 접속\",\n            \"대기 중인 재직증명서 신청 목록 확인\",\n            \"개별 신청 상세 내용 확인\",\n            \"승인 또는 반려 결정 및 코멘트 입력\",\n            \"승인 시 재직증명서 자동 생성\",\n            \"생성된 재직증명서는 직원이 다운로드 가능\",\n            \"재직증명서에는 바코드와 발급일이 자동 포함\"\n        ]\n    },\n    {\n        'name': '4.6 직원 관리 워크플로우',\n        'steps': [\n            \"관리자가 직원 관리 페이지 접속\",\n            \"등록된 직원 목록 확인\",\n            \"개별 직원 정보 확인 및 수정\",\n            \"직원 삭제 (관련 휴가, 재직증명서 기록 함께 삭제)\",\n            \"엑셀 파일을 통한 직원 대량 등록\",\n            \"직원별 연간 휴가 일수 설정\",\n            \"직원 입사일 설정\"\n        ]\n    },\n    {\n        'name': '4.7 회사 정보 관리 워크플로우',\n        'steps': [\n            \"관리자가 회사 정보 관리 페이지 접속\",\n            \"회사명, 대표자명, 사업자등록번호 등 정보 입력/수정\",\n            \"직인 이미지 등록\",\n            \"저장된 회사 정보는 재직증명서 생성 시 자동으로 적용\"\n        ]\n    },\n    {\n        'name': '4.8 공휴일 관리 워크플로우',\n        'steps': [\n            \"관리자가 공휴일 관리 페이지 접속\",\n            \"연도별 공휴일 목록 확인\",\n            \"새로운 공휴일 등록\",\n            \"기존 공휴일 삭제\",\n            \"등록된 공휴일은 휴가 일수 계산 시 자동으로 제외\"\n        ]\n    }\n]\n\nfor workflow in workflows:\n    wf_heading = doc.add_heading(level=2)\n    wf_heading.add_run(workflow['name'])\n    \n    for i, step in enumerate(workflow['steps'], 1):\n        step_para = doc.add_paragraph()\n        step_para.paragraph_format.left_indent = Pt(20)\n        step_para.add_run(f\"{i}. {step}\")\n    \n    doc.add_paragraph()  # 빈 줄 추가\n\n# 역할 및 권한\ndoc.add_heading('5. 역할 및 권한', level=1)\n\nroles = [\n    {\n        'name': '5.1 직원 역할',\n        'permissions': [\n            \"휴가 신청 및 취소\",\n            \"본인의 휴가 내역 조회\",\n            \"휴가 일수 확인\",\n            \"재직증명서 신청 및 다운로드\",\n            \"본인의 정보 확인\"\n        ]\n    },\n    {\n        'name': '5.2 관리자 역할',\n        'permissions': [\n            \"모든 직원 권한 포함\",\n            \"직원 관리 (조회, 등록, 수정, 삭제)\",\n            \"휴가 승인/반려\",\n            \"재직증명서 발급 승인/반려\",\n            \"공휴일 관리\",\n            \"회사 정보 관리\",\n            \"휴가 통계 확인 및 내보내기\"\n        ]\n    }\n]\n\nfor role in roles:\n    role_heading = doc.add_heading(level=2)\n    role_heading.add_run(role['name'])\n    \n    for perm in role['permissions']:\n        perm_para = doc.add_paragraph(style='List Bullet')\n        perm_para.add_run(perm)\n    \n    doc.add_paragraph()  # 빈 줄 추가\n\n# 기술 스택\ndoc.add_heading('6. 기술 스택', level=1)\n\ntech_stack = [\n    {\n        'name': '6.1 백엔드',\n        'items': [\n            \"Python 3.11\",\n            \"Flask 2.2.3 - 웹 프레임워크\",\n            \"Flask-Login 0.6.2 - 사용자 인증\",\n            \"Flask-SQLAlchemy 3.0.3 - ORM\",\n            \"Flask-WTF 1.1.1 - 폼 처리\",\n            \"SQLAlchemy 2.0.20 - 데이터베이스 ORM\",\n            \"Werkzeug 2.2.3 - WSGI 유틸리티\",\n            \"Gunicorn 21.2.0 - WSGI HTTP 서버\"\n        ]\n    },\n    {\n        'name': '6.2 데이터베이스',\n        'items': [\n            \"PostgreSQL - 관계형 데이터베이스\",\n            \"psycopg2-binary 2.9.9 - PostgreSQL 어댑터\"\n        ]\n    },\n    {\n        'name': '6.3 프론트엔드',\n        'items': [\n            \"HTML5\",\n            \"CSS3\",\n            \"JavaScript\",\n            \"Tailwind CSS - 반응형 UI 프레임워크\"\n        ]\n    },\n    {\n        'name': '6.4 문서 생성',\n        'items': [\n            \"python-docx 0.8.11 - 워드 문서 생성\",\n            \"reportlab 4.0.4 - PDF 생성\",\n            \"Pillow 10.0.0 - 이미지 처리\"\n        ]\n    },\n    {\n        'name': '6.5 배포',\n        'items': [\n            \"Render.com - 클라우드 호스팅\",\n            \"Git - 버전 관리\"\n        ]\n    }\n]\n\nfor tech in tech_stack:\n    tech_heading = doc.add_heading(level=2)\n    tech_heading.add_run(tech['name'])\n    \n    for item in tech['items']:\n        item_para = doc.add_paragraph(style='List Bullet')\n        item_para.add_run(item)\n    \n    doc.add_paragraph()  # 빈 줄 추가\n\n# 보안 및 데이터 보호\ndoc.add_heading('7. 보안 및 데이터 보호', level=1)\n\nsecurity_points = [\n    \"비밀번호 암호화: 사용자 비밀번호는 Werkzeug의 보안 해싱 기능을 사용하여 저장\",\n    \"역할 기반 접근 제어: 사용자 역할에 따른 기능 및 데이터 접근 제한\",\n    \"주민등록번호 보호: 주민번호는 앞 6자리와 뒷자리 첫 번째 숫자만 저장\",\n    \"세션 관리: Flask-Login을 통한 안전한 사용자 세션 관리\",\n    \"CSRF 보호: Flask-WTF의 CSRF 토큰을 사용한 크로스 사이트 요청 위조 방지\",\n    \"입력값 검증: 모든 사용자 입력에 대한 서버 측 유효성 검사 수행\"\n]\n\nfor point in security_points:\n    sec_para = doc.add_paragraph(style='List Bullet')\n    sec_para.add_run(point)\n\n# 결론\ndoc.add_heading('8. 결론', level=1)\nconclusion = doc.add_paragraph()\nconclusion.add_run('에스에스전력 휴가관리시스템은 직원들의 휴가 및 재직증명서 관리를 효율적으로 처리하기 위한 종합적인 솔루션입니다. Flask 기반의 안정적인 백엔드와 직관적인 사용자 인터페이스를 통해 관리자와 직원 모두에게 편리한 경험을 제공합니다. 한국 공휴일 자동 계산, 재직증명서 자동 생성, 직원 대량 등록 등의 기능을 통해 인사 업무 효율성을 크게 향상시키며, 부서별, 직급별 관리 체계를 통해 기업 내 인사 관리를 체계화합니다.')\n\n# 저작권 문구 추가\nfooter_paragraph = doc.add_paragraph()\nfooter_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER\nfooter_run = footer_paragraph.add_run('© 2025 주식회사 에스에스전력 제작')\nfooter_run.font.name = 'HY견고딕'\nfooter_run.font.size = Pt(8)\nfooter_run.font.color.rgb = RGBColor(100, 100, 100)\n\n# 문서 저장\ndoc.save('에스에스전력_휴가관리시스템_워크플로우_보고서.docx')\n\nprint(\"워크플로우 보고서가 성공적으로 생성되었습니다.\")","size_bytes":15029},"employee.py":{"content":"from flask import Blueprint, render_template, redirect, url_for, flash, request, jsonify, make_response\nfrom flask_login import login_required, current_user\nfrom app import db\nfrom models import VacationDays, VacationRequest, VacationStatus, EmploymentCertificate, CertificateStatus, CompanyInfo\nfrom forms import VacationRequestForm, EmploymentCertificateRequestForm, VacationSearchForm\nfrom datetime import datetime\nfrom utils import get_vacation_days_count, check_overlapping_vacation\nimport tempfile\nimport os\nimport urllib.parse\nimport io\nimport pandas as pd\n# WeasyPrint는 시스템 종속성 문제가 있어 사용하지 않습니다\n# 필요한 경우 reportlab을 사용합니다\nfrom reportlab.pdfgen import canvas\nfrom PIL import Image, ImageDraw, ImageFont\nimport base64\nimport docx\nfrom docx.shared import Pt, Cm, Inches\nfrom docx.enum.text import WD_ALIGN_PARAGRAPH, WD_TAB_ALIGNMENT, WD_TAB_LEADER\nfrom docx.enum.table import WD_ALIGN_VERTICAL, WD_ROW_HEIGHT\nfrom docx.oxml.ns import nsdecls\nfrom docx.oxml import parse_xml\nfrom docx.enum.section import WD_SECTION\nfrom docx.enum.style import WD_STYLE_TYPE\nfrom docx.enum.section import WD_ORIENT\nfrom docx.enum.table import WD_TABLE_ALIGNMENT\n# qrcode 모듈은 더 이상 사용하지 않습니다\nimport PIL\nfrom PIL import Image, ImageDraw, ImageFont\n\nemployee_bp = Blueprint('employee', __name__)\n\n@employee_bp.route('/dashboard')\n@login_required\ndef dashboard():\n    \"\"\"직원 대시보드\"\"\"\n    # 현재 연도의 휴가 정보 가져오기\n    current_year = datetime.now().year\n    vacation_days = VacationDays.query.filter_by(\n        user_id=current_user.id,\n        year=current_year\n    ).first()\n    \n    # 없으면 생성\n    if not vacation_days:\n        vacation_days = VacationDays(\n            user_id=current_user.id,\n            year=current_year,\n            total_days=15,  # 기본값\n            used_days=0\n        )\n        db.session.add(vacation_days)\n        db.session.commit()\n    \n    # 실시간 잔여 휴가일수 계산\n    from utils import calculate_remaining_vacation_days\n    remaining_days = calculate_remaining_vacation_days(current_user.id, current_year)\n    \n    # 최근 휴가 신청 내역 (5개)\n    recent_requests = VacationRequest.query.filter_by(\n        user_id=current_user.id\n    ).order_by(VacationRequest.created_at.desc()).limit(5).all()\n    \n    # 대기중인 휴가 신청 수\n    pending_count = VacationRequest.query.filter_by(\n        user_id=current_user.id,\n        status=VacationStatus.PENDING\n    ).count()\n    \n    # 승인된 휴가 신청 수\n    approved_count = VacationRequest.query.filter_by(\n        user_id=current_user.id,\n        status=VacationStatus.APPROVED\n    ).count()\n    \n    # 추가 통계 데이터 (실시간 계산된 값 사용)\n    remaining_vacation_days = remaining_days  # 실시간 계산된 잔여일수\n    total_vacation_days = vacation_days.total_days\n    \n    # 대기중인 모든 신청 (휴가 + 증명서)\n    pending_requests = (VacationRequest.query.filter_by(user_id=current_user.id, status=VacationStatus.PENDING).count() +\n                       EmploymentCertificate.query.filter_by(user_id=current_user.id, status=CertificateStatus.PENDING).count())\n    \n    # 최근 휴가 신청 내역 (5개)\n    recent_my_vacations = VacationRequest.query.filter_by(\n        user_id=current_user.id\n    ).order_by(VacationRequest.created_at.desc()).limit(5).all()\n    \n    # 이번 달 예정된 이벤트 (휴가, 공휴일)\n    from models import Holiday\n    current_month = datetime.now().month\n    current_year = datetime.now().year\n    \n    upcoming_events = []\n    \n    # 승인된 휴가 일정\n    approved_vacations = VacationRequest.query.filter_by(\n        user_id=current_user.id,\n        status=VacationStatus.APPROVED\n    ).filter(\n        VacationRequest.start_date >= datetime.now().date()\n    ).order_by(VacationRequest.start_date).limit(10).all()\n    \n    for vacation in approved_vacations:\n        upcoming_events.append({\n            'date': vacation.start_date,\n            'type': 'vacation',\n            'description': f'{vacation.type} ({vacation.days}일)'\n        })\n    \n    # 공휴일\n    holidays = Holiday.query.filter(\n        Holiday.date >= datetime.now().date()\n    ).order_by(Holiday.date).limit(10).all()\n    \n    for holiday in holidays:\n        upcoming_events.append({\n            'date': holiday.date,\n            'type': 'holiday',\n            'description': holiday.name\n        })\n    \n    # 날짜순 정렬\n    upcoming_events.sort(key=lambda x: x['date'])\n    upcoming_events = upcoming_events[:10]  # 최대 10개\n\n    return render_template(\n        'employee/dashboard_gov.html',\n        remaining_vacation_days=remaining_vacation_days,\n        total_vacation_days=total_vacation_days,\n        pending_requests=pending_requests,\n        recent_my_vacations=recent_my_vacations,\n        upcoming_events=upcoming_events,\n        current_year=current_year\n    )\n\n@employee_bp.route('/request-vacation', methods=['GET', 'POST'])\n@login_required\ndef request_vacation():\n    \"\"\"휴가 신청 페이지\"\"\"\n    form = VacationRequestForm()\n    \n    if form.validate_on_submit():\n        # 현재 연도의 휴가 정보 가져오기\n        year = form.start_date.data.year\n        vacation_days = VacationDays.query.filter_by(\n            user_id=current_user.id,\n            year=year\n        ).first()\n        \n        # 없으면 생성\n        if not vacation_days:\n            vacation_days = VacationDays(\n                user_id=current_user.id,\n                year=year,\n                total_days=15,  # 기본값\n                used_days=0\n            )\n            db.session.add(vacation_days)\n            db.session.commit()\n        \n        # 휴가 일수 계산\n        type_days = {\n            '연차': float(form.days.data),\n            '반차(오전)': 0.5,\n            '반차(오후)': 0.5,\n            '특별휴가': float(form.days.data)\n        }\n        days = type_days.get(form.type.data, float(form.days.data))\n        \n        # 남은 휴가 일수 확인 (특별휴가는 연차 차감 없음)\n        if form.type.data != '특별휴가' and days > vacation_days.remaining_days():\n            flash('남은 휴가 일수가 부족합니다.', 'danger')\n            return render_template('employee/request_vacation.html', form=form)\n        \n        # 같은 기간에 이미 신청한 휴가가 있는지 확인\n        if check_overlapping_vacation(current_user.id, form.start_date.data, form.end_date.data):\n            flash('이미 해당 기간에 신청한 휴가가 있습니다.', 'danger')\n            return render_template('employee/request_vacation.html', form=form)\n        \n        # 휴가 신청 저장\n        vacation_request = VacationRequest(\n            user_id=current_user.id,\n            start_date=form.start_date.data,\n            end_date=form.end_date.data,\n            days=days,\n            reason=form.reason.data,\n            type=form.type.data,\n            status=VacationStatus.PENDING\n        )\n        \n        db.session.add(vacation_request)\n        db.session.commit()\n        \n        flash('휴가 신청이 완료되었습니다.', 'success')\n        return redirect(url_for('employee.my_vacations'))\n    \n    return render_template('employee/request_vacation.html', form=form)\n\n@employee_bp.route('/my-vacations', methods=['GET', 'POST'])\n@login_required\ndef my_vacations():\n    \"\"\"내 휴가 내역 페이지 (기간 검색 및 엑셀 출력 지원)\"\"\"\n    form = VacationSearchForm()\n    \n    # 기본 쿼리\n    query = VacationRequest.query.filter_by(user_id=current_user.id)\n    \n    # 기본 연도 설정\n    current_year = datetime.now().year\n    search_year = current_year\n    \n    # 폼 처리 (POST 요청 모두 처리)\n    if request.method == 'POST':\n        # 엑셀 다운로드 요청\n        if form.export.data:\n            return export_my_vacation_data(form)\n        \n        # 검색 필터 적용 (우선순위: 년도/월 > 기간 > 기타)\n        \n        # 1. 년도/월 검색 (우선순위 높음)\n        if form.year.data and form.year.data != 0:\n            # SQLite에서는 extract 대신 strftime 사용\n            from sqlalchemy import func\n            query = query.filter(func.strftime('%Y', VacationRequest.start_date) == str(form.year.data))\n            search_year = form.year.data\n            \n            # 월이 선택된 경우 해당 월만 검색\n            if hasattr(form, 'month') and form.month.data and form.month.data != 0:\n                month_str = f'{form.month.data:02d}'  # 01, 02, ..., 12 형식\n                query = query.filter(func.strftime('%m', VacationRequest.start_date) == month_str)\n        \n        # 2. 기간 검색 (년도가 선택되지 않은 경우에만 적용)\n        elif form.start_date.data or form.end_date.data:\n            if form.start_date.data:\n                query = query.filter(VacationRequest.start_date >= form.start_date.data)\n            if form.end_date.data:\n                query = query.filter(VacationRequest.end_date <= form.end_date.data)\n        \n        # 3. 상태 검색\n        if form.status.data != 'all':\n            query = query.filter(VacationRequest.status == form.status.data)\n    else:\n        # URL 파라미터로부터 필터 적용 (기존 호환성)\n        year = request.args.get('year', current_year, type=int)\n        status = request.args.get('status', 'all')\n        \n        if year != current_year:\n            from sqlalchemy import func\n            query = query.filter(func.strftime('%Y', VacationRequest.start_date) == str(year))\n            form.year.data = year\n            search_year = year\n        \n        if status != 'all':\n            query = query.filter(VacationRequest.status == status)\n            form.status.data = status\n    \n    # 정렬 (최신순)\n    vacation_requests = query.order_by(VacationRequest.created_at.desc()).all()\n    \n    # 연도별 휴가 정보\n    vacation_days = VacationDays.query.filter_by(\n        user_id=current_user.id,\n        year=search_year\n    ).first()\n    \n    if not vacation_days:\n        vacation_days = VacationDays(\n            user_id=current_user.id,\n            year=search_year,\n            total_days=15,  # 기본값\n            used_days=0\n        )\n        db.session.add(vacation_days)\n        db.session.commit()\n    \n    return render_template(\n        'employee/my_vacations_gov.html',\n        vacation_requests=vacation_requests,\n        vacation_days=vacation_days,\n        year=search_year,\n        status_filter=form.status.data or 'all',\n        search_form=form\n    )\n\n@employee_bp.route('/cancel-vacation/<int:request_id>', methods=['POST'])\n@login_required\ndef cancel_vacation(request_id):\n    \"\"\"휴가 신청 취소\"\"\"\n    vacation_request = VacationRequest.query.get_or_404(request_id)\n    \n    # 권한 확인\n    if vacation_request.user_id != current_user.id:\n        flash('권한이 없습니다.', 'danger')\n        return redirect(url_for('employee.my_vacations'))\n    \n    # 대기 중인 신청만 취소 가능\n    if vacation_request.status != VacationStatus.PENDING:\n        flash('대기 중인 휴가 신청만 취소할 수 있습니다.', 'danger')\n        return redirect(url_for('employee.my_vacations'))\n    \n    # 취소 처리\n    db.session.delete(vacation_request)\n    db.session.commit()\n    \n    flash('휴가 신청이 취소되었습니다.', 'success')\n    return redirect(url_for('employee.my_vacations'))\n\n\ndef export_my_vacation_data(form):\n    \"\"\"개인 휴가 데이터 엑셀 다운로드\"\"\"\n    try:\n        # 쿼리 생성\n        query = VacationRequest.query.filter_by(user_id=current_user.id)\n        \n        # 검색 조건 적용 (엑셀 출력용)\n        \n        # 1. 년도/월 검색 (우선순위 높음)\n        if hasattr(form, 'year') and form.year.data and form.year.data != 0:\n            from sqlalchemy import func\n            query = query.filter(func.strftime('%Y', VacationRequest.start_date) == str(form.year.data))\n            \n            # 월이 선택된 경우 해당 월만 검색\n            if hasattr(form, 'month') and form.month.data and form.month.data != 0:\n                month_str = f'{form.month.data:02d}'  # 01, 02, ..., 12 형식\n                query = query.filter(func.strftime('%m', VacationRequest.start_date) == month_str)\n        \n        # 2. 기간 검색 (년도가 선택되지 않은 경우에만 적용)\n        elif (hasattr(form, 'start_date') and form.start_date.data) or (hasattr(form, 'end_date') and form.end_date.data):\n            if hasattr(form, 'start_date') and form.start_date.data:\n                query = query.filter(VacationRequest.start_date >= form.start_date.data)\n            if hasattr(form, 'end_date') and form.end_date.data:\n                query = query.filter(VacationRequest.end_date <= form.end_date.data)\n        \n        # 3. 상태 검색\n        if hasattr(form, 'status') and form.status.data != 'all':\n            query = query.filter(VacationRequest.status == form.status.data)\n        \n        # 정렬\n        query = query.order_by(VacationRequest.created_at.desc())\n        \n        # 결과 가져오기\n        results = query.all()\n        \n        if not results:\n            # 데이터가 없는 경우 빈 엑셀 파일 생성\n            data = [{'메시지': '검색 조건에 맞는 휴가 데이터가 없습니다.'}]\n        else:\n            # 엑셀 파일 생성 (pandas 이용)\n            data = []\n            for vacation_request in results:\n                data.append({\n                    '휴가시작일': vacation_request.start_date.strftime('%Y-%m-%d'),\n                    '휴가종료일': vacation_request.end_date.strftime('%Y-%m-%d'),\n                    '휴가일수': float(vacation_request.days),\n                    '휴가유형': vacation_request.type,\n                    '휴가사유': vacation_request.reason or '',\n                    '상태': vacation_request.status,\n                    '신청일시': vacation_request.created_at.strftime('%Y-%m-%d %H:%M:%S'),\n                    '승인일시': vacation_request.approval_date.strftime('%Y-%m-%d %H:%M:%S') if vacation_request.approval_date else ''\n                })\n        \n        # DataFrame 생성\n        df = pd.DataFrame(data)\n        \n        # 파일명 생성\n        current_time = datetime.now().strftime('%Y%m%d_%H%M%S')\n        filename = f'my_vacation_data_{current_time}.xlsx'\n        \n        # BytesIO를 사용하여 메모리에서 엑셀 파일 생성\n        output = io.BytesIO()\n        with pd.ExcelWriter(output, engine='openpyxl') as writer:\n            df.to_excel(writer, index=False, sheet_name='나의휴가현황')\n        \n        output.seek(0)\n        excel_data = output.getvalue()\n        \n        # 응답 생성\n        response = make_response(excel_data)\n        response.headers['Content-Type'] = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n        response.headers['Content-Disposition'] = f'attachment; filename=\"{filename}\"'\n        \n        return response\n        \n    except Exception as e:\n        flash(f'엑셀 다운로드 중 오류가 발생했습니다: {str(e)}', 'danger')\n        return redirect(url_for('employee.my_vacations'))\n    \n    # 임시 파일로 저장\n    with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp:\n        df.to_excel(tmp.name, index=False, engine='openpyxl')\n        \n        # 파일 읽기\n        with open(tmp.name, 'rb') as f:\n            excel_data = f.read()\n        \n        # 임시 파일 삭제\n        os.unlink(tmp.name)\n    \n    # 응답 생성\n    response = make_response(excel_data)\n    response.headers['Content-Type'] = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    response.headers['Content-Disposition'] = f'attachment; filename=\"{filename}\"'\n    \n    return response\n\n@employee_bp.route('/calculate-vacation-days', methods=['POST'])\n@login_required\ndef calculate_vacation_days():\n    \"\"\"휴가 일수 계산 API\"\"\"\n    data = request.json\n    start_date = datetime.strptime(data['start_date'], '%Y-%m-%d').date()\n    end_date = datetime.strptime(data['end_date'], '%Y-%m-%d').date()\n    vacation_type = data.get('type', '연차')\n    \n    if vacation_type in ['반차(오전)', '반차(오후)']:\n        days = 0.5\n    else:\n        days = get_vacation_days_count(start_date, end_date)\n    \n    return jsonify({'days': days})\n\n\n@employee_bp.route('/request-certificate', methods=['GET', 'POST'])\n@login_required\ndef request_certificate():\n    \"\"\"재직증명서 신청 페이지\"\"\"\n    form = EmploymentCertificateRequestForm()\n    \n    if form.validate_on_submit():\n        # 재직증명서 신청 저장\n        certificate = EmploymentCertificate(\n            user_id=current_user.id,\n            purpose=form.purpose.data,\n            status=CertificateStatus.PENDING\n        )\n        \n        db.session.add(certificate)\n        db.session.commit()\n        \n        flash('재직증명서 신청이 완료되었습니다.', 'success')\n        return redirect(url_for('employee.my_certificates'))\n    \n    return render_template('employee/request_certificate.html', form=form)\n\n\n@employee_bp.route('/my-certificates')\n@login_required\ndef my_certificates():\n    \"\"\"내 재직증명서 신청 내역 페이지\"\"\"\n    # 재직증명서 신청 내역 (최신순)\n    certificates = EmploymentCertificate.query.filter_by(\n        user_id=current_user.id\n    ).order_by(EmploymentCertificate.created_at.desc()).all()\n    \n    return render_template('employee/my_certificates.html', certificates=certificates)\n\n\ndef text_to_image(text, font_size=24, width=None, text_color=(0, 0, 0), bg_color=(255, 255, 255)):\n    \"\"\"텍스트를 이미지로 변환하는 함수\"\"\"\n    # 기본 폰트 (Arial)\n    try:\n        # 시스템에 설치된 폰트 사용\n        font = ImageFont.truetype(\"Arial\", font_size)\n    except:\n        # 기본 폰트 사용\n        font = ImageFont.load_default()\n    \n    # 텍스트 크기 계산\n    test_img = Image.new('RGB', (1, 1))\n    test_draw = ImageDraw.Draw(test_img)\n    text_width, text_height = test_draw.textsize(text, font=font) if hasattr(test_draw, 'textsize') else font.getbbox(text)[2:4]\n    \n    # 이미지 크기 설정\n    if width:\n        img_width = width\n    else:\n        img_width = text_width + 20  # 여백 추가\n    img_height = text_height + 20  # 여백 추가\n    \n    # 이미지 생성\n    img = Image.new('RGB', (img_width, img_height), color=bg_color)\n    draw = ImageDraw.Draw(img)\n    \n    # 텍스트 추가 (가운데 정렬)\n    x = (img_width - text_width) // 2\n    y = (img_height - text_height) // 2\n    draw.text((x, y), text, font=font, fill=text_color)\n    \n    # 이미지를 바이트로 변환\n    img_byte = io.BytesIO()\n    img.save(img_byte, format='PNG')\n    img_byte.seek(0)\n    \n    return img_byte.getvalue()\n\ndef create_qrcode(data, size=200):\n    \"\"\"QR 코드 생성 함수 (간단한 격자무늬 이미지로 대체)\"\"\"\n    # 이미지 크기와 색상 설정\n    img_size = size\n    background_color = (255, 255, 255)  # 흰색\n    qrcode_color = (0, 0, 0)  # 검은색\n    \n    # 새 이미지 생성\n    img = Image.new('RGB', (img_size, img_size), color=background_color)\n    draw = ImageDraw.Draw(img)\n    \n    # 격자 크기 계산\n    grid_size = img_size // 25\n    \n    # 데이터를 이용한 패턴 생성\n    data_hash = sum([ord(c) for c in data])\n    \n    # 격자 그리기\n    for x in range(0, img_size, grid_size):\n        for y in range(0, img_size, grid_size):\n            # 데이터 기반 패턴 생성\n            if ((x // grid_size) * 5 + (y // grid_size) + data_hash) % 3 == 0:\n                draw.rectangle(\n                    (x, y, x + grid_size - 1, y + grid_size - 1),\n                    fill=qrcode_color\n                )\n    \n    # 테두리 추가\n    draw.rectangle((0, 0, img_size-1, img_size-1), outline=qrcode_color, width=2)\n    \n    # QR 코드 영역 표시 (코너 사각형)\n    corner_size = grid_size * 3\n    \n    # 왼쪽 상단\n    draw.rectangle((0, 0, corner_size, corner_size), fill=qrcode_color)\n    draw.rectangle((grid_size, grid_size, corner_size-grid_size, corner_size-grid_size), fill=background_color)\n    \n    # 오른쪽 상단\n    draw.rectangle((img_size-corner_size-1, 0, img_size-1, corner_size), fill=qrcode_color)\n    draw.rectangle((img_size-corner_size+grid_size-1, grid_size, img_size-grid_size-1, corner_size-grid_size), fill=background_color)\n    \n    # 왼쪽 하단\n    draw.rectangle((0, img_size-corner_size-1, corner_size, img_size-1), fill=qrcode_color)\n    draw.rectangle((grid_size, img_size-corner_size+grid_size-1, corner_size-grid_size, img_size-grid_size-1), fill=background_color)\n    \n    # 이미지를 바이트로 변환\n    img_byte = io.BytesIO()\n    img.save(img_byte, format='PNG')\n    img_byte.seek(0)\n    \n    return img_byte\n\ndef create_barcode(data, width=400, height=100):\n    \"\"\"바코드 생성 함수 (가로형 형태)\"\"\"\n    # 최소 높이 보장 (오류 방지)\n    height = max(height, 30)\n    \n    # 이미지 설정\n    img_width = width\n    img_height = height\n    background_color = (255, 255, 255)  # 흰색\n    barcode_color = (0, 0, 0)  # 검은색\n    \n    # 새 이미지 생성\n    img = Image.new('RGB', (img_width, img_height), color=background_color)\n    draw = ImageDraw.Draw(img)\n    \n    # 바코드 패턴 설정\n    bar_width = 3  # 바코드 선 너비\n    gap_width = 2  # 간격\n    max_bars = 35  # 바 개수\n    position = 20  # 시작 위치\n    bar_height = max(img_height - 25, 10)  # 바코드 높이 (최소값 보장)\n    \n    # 데이터 해시 값으로 일관된 패턴 생성\n    data_hash = sum([ord(c) for c in data])\n    \n    # 바코드 생성\n    for i in range(max_bars):\n        # 데이터 기반 패턴 (높이 변화 축소)\n        height_variation = min(((i * 5 + data_hash) % 3), 1)  # 높이 변화 최소화\n        actual_bar_height = bar_height - height_variation\n\n        # 바 그리기 - 특정 패턴으로 바 생성\n        if ((i * 11 + data_hash) % 5) != 0:\n            draw.rectangle(\n                (position, 5, position + bar_width, 5 + actual_bar_height),\n                fill=barcode_color\n            )\n\n        # 가끔 더 굵은 바 추가\n        if i % 8 == 0:\n            draw.rectangle(\n                (position + bar_width + gap_width, 5, \n                 position + bar_width * 2 + gap_width, 5 + actual_bar_height),\n                fill=barcode_color\n            )\n            position += bar_width + gap_width\n            \n        position += bar_width + gap_width\n    \n    # 바코드 번호 추가\n    try:\n        font = ImageFont.truetype(\"Arial\", 10)  # 폰트 크기 줄임\n    except:\n        font = ImageFont.load_default()\n    \n    # 바코드 번호 텍스트 추가 (바닥에 가깝게 배치)\n    text_width = draw.textbbox((0, 0), data, font=font)[2]\n    text_x = (img_width - text_width) // 2\n    # 텍스트 위치 조정 - 이미지 바닥에 더 가깝게\n    draw.text((text_x, img_height - 15), data, font=font, fill=barcode_color)\n    \n    # 테두리 추가\n    draw.rectangle(\n        (10, 2, img_width - 10, img_height - 17),\n        outline=barcode_color,\n        width=1\n    )\n    \n    # 이미지를 바이트로 변환\n    img_byte = io.BytesIO()\n    img.save(img_byte, format='PNG', dpi=(300, 300))\n    img_byte.seek(0)\n    \n    return img_byte\n\n\ndef create_docx_certificate(certificate, current_user, company_info):\n    \"\"\"워드 파일로 재직증명서 생성 - 이미지와 정확히 동일한 형식\"\"\"\n    company_name = company_info.name if company_info else '주식회사 에스에스전력'\n    ceo_name = company_info.ceo_name if company_info else '김세인'\n    \n    today = datetime.now().date()\n    today_str = f\"{today.year}년 {today.month}월 {today.day}일\"\n    \n    hire_date_str = \"\"\n    if current_user.hire_date:\n        hire_date_str = current_user.hire_date.strftime('%Y년 %m월 %d일')\n    else:\n        hire_date_str = \"2024년 12월 20일\"  # 기본값 설정\n    \n    # 워드 문서 생성\n    doc = docx.Document()\n    \n    # A4 사이즈 설정 (단위: cm)\n    sections = doc.sections\n    for section in sections:\n        section.page_width = Cm(21.0)\n        section.page_height = Cm(29.7)\n        # 여백을 이미지와 유사하게 설정\n        section.top_margin = Cm(1.5)\n        section.bottom_margin = Cm(1.5)\n        section.left_margin = Cm(2.0)\n        section.right_margin = Cm(2.0)\n    \n    # 스타일 설정\n    style = doc.styles['Normal']\n    style.font.name = 'HY견고딕'\n    style.font.size = Pt(10)\n    \n    # 발급일을 문서 상단 우측 끝으로 배치\n    issue_date_p = doc.add_paragraph()\n    issue_date_p.alignment = WD_ALIGN_PARAGRAPH.RIGHT\n    issue_date_p.space_after = Pt(20)  # 아래쪽 공백 추가\n    issue_date_run = issue_date_p.add_run(f'발급일: {today_str}')\n    issue_date_run.font.name = 'HY견고딕'\n    issue_date_run.font.size = Pt(10)\n    \n    # 제목 추가 - 중앙 정렬\n    title = doc.add_paragraph()\n    title.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    title_run = title.add_run('재직증명서')\n    title_run.font.name = 'HY견고딕'\n    title_run.font.size = Pt(20)  # 폰트 크기 20으로 변경\n    title_run.font.bold = True\n    title.space_after = Pt(12)  # 제목 아래 약간의 여백\n    \n    # 가로선 추가 (테이블 방식으로 구현)\n    line_table = doc.add_table(rows=1, cols=1)\n    line_table.style = 'Table Grid'\n    line_table.autofit = False\n    line_table.width = Cm(16)\n    line_table.alignment = WD_TABLE_ALIGNMENT.CENTER\n    # 테이블 높이를 아주 작게 설정해서 선으로 보이게 함\n    line_table.rows[0].height = Cm(0.05)\n    line_table.rows[0].height_rule = 2  # WD_ROW_HEIGHT.EXACTLY = 2\n    # 여백 추가\n    p_after_line = doc.add_paragraph()\n    p_after_line.space_after = Pt(12)\n    \n    # 표 생성\n    table = doc.add_table(rows=4, cols=4)\n    table.style = 'Table Grid'\n    table.autofit = False\n    table.width = Cm(16)\n    table.alignment = WD_TABLE_ALIGNMENT.CENTER\n    \n    # 표 내용 채우기 (이미지와 정확히 동일하게)\n    # 1행: 성명, 주민등록번호\n    row = table.rows[0]\n    row.cells[0].text = '성명'\n    row.cells[1].text = current_user.name if current_user.name else '김영희'  # 기본값\n    row.cells[2].text = '주민등록번호'\n    \n    # 주민번호 표시 (실제 주민번호가 있으면 표시, 없으면 기본값)\n    if current_user.resident_id_first and current_user.resident_id_last_digit:\n        resident_id = f\"{current_user.resident_id_first}-{current_user.resident_id_last_digit}******\"\n    else:\n        resident_id = \"******-*******\"  # 기본값\n    row.cells[3].text = resident_id\n    \n    # 2행: 소속, 직위\n    row = table.rows[1]\n    row.cells[0].text = '소속'\n    row.cells[1].text = current_user.department or '개발팀'\n    row.cells[2].text = '직위'\n    row.cells[3].text = current_user.position or '과장'\n    \n    # 3행: 재직기간\n    row = table.rows[2]\n    row.cells[0].text = '재직기간'\n    cell = row.cells[1]\n    cell.merge(row.cells[2])\n    cell.merge(row.cells[3])\n    cell.text = f\"{hire_date_str} ~ 현재\"\n    \n    # 4행: 용도\n    row = table.rows[3]\n    row.cells[0].text = '용도'\n    cell = row.cells[1]\n    cell.merge(row.cells[2])\n    cell.merge(row.cells[3])\n    cell.text = certificate.purpose if certificate and certificate.purpose else '개인'\n    \n    # 표 셀 스타일 설정\n    for row in table.rows:\n        row.height = Cm(0.9)  # 행 높이 설정\n        row.height_rule = 2  # WD_ROW_HEIGHT.EXACTLY = 2\n        \n        for cell in row.cells:\n            cell._element.tcPr.append(parse_xml(f'<w:vAlign {nsdecls(\"w\")} w:val=\"center\"/>'))\n            \n            for paragraph in cell.paragraphs:\n                paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER\n                paragraph.space_before = Pt(0)\n                paragraph.space_after = Pt(0)\n                \n                for run in paragraph.runs:\n                    run.font.name = 'HY견고딕'\n                    run.font.size = Pt(12)\n    \n    # 표 아래 추가 공백 (네 칸으로 증가)\n    for i in range(4):\n        table_space = doc.add_paragraph()\n        table_space.space_before = Pt(15)\n        table_space.space_after = Pt(0)\n    \n    # 증명 문구 (표 아래 네 칸 이후에 배치)\n    p_confirm = doc.add_paragraph()\n    p_confirm.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    p_confirm.space_before = Pt(0)\n    p_confirm.space_after = Pt(25)\n    confirm_run = p_confirm.add_run(\"상기인은 위와 같이 재직하고 있음을 증명합니다.\")\n    confirm_run.font.name = 'HY견고딕'\n    confirm_run.font.size = Pt(13)  # 폰트 크기 13으로 변경\n    \n    # 중앙 여백 (이미지처럼 더 많은 간격 추가)\n    for i in range(2):\n        empty_p = doc.add_paragraph()\n        empty_p.space_before = Pt(10)\n        empty_p.space_after = Pt(0)\n    \n    # 날짜를 회사명 위로 배치 (중앙 정렬)\n    date_p = doc.add_paragraph()\n    date_p.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    date_p.space_before = Pt(10)\n    date_p.space_after = Pt(10)\n    date_run = date_p.add_run(today_str)\n    date_run.font.name = 'HY견고딕'\n    date_run.font.size = Pt(14)  # 폰트 크기 14로 변경\n    \n    # 날짜와 회사이름 사이 추가 여백\n    date_company_space = doc.add_paragraph()\n    date_company_space.space_before = Pt(15)\n    \n    # 회사명\n    company_p = doc.add_paragraph()\n    company_p.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    company_p.space_before = Pt(0)\n    company_p.space_after = Pt(0)\n    company_run = company_p.add_run(company_name)\n    company_run.font.name = 'HY견고딕'\n    company_run.font.size = Pt(15)  # 폰트 크기 15로 변경\n    company_run.font.bold = True\n    \n    # 회사 이름과 대표이사 이름을 바로 붙여서 배치 (여백 제거)\n    \n    # 대표이사 및 직인 생략\n    ceo_p = doc.add_paragraph()\n    ceo_p.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    ceo_p.space_before = Pt(0)\n    ceo_p.space_after = Pt(0)\n    ceo_run = ceo_p.add_run(f\"대표이사 김세인\")  # 이름 수정\n    ceo_run.font.name = 'HY견고딕'\n    ceo_run.font.size = Pt(15)  # 폰트 크기 15로 변경\n    ceo_run.font.bold = True\n    \n    ceo_p.add_run(\" \")  # 간격 추가\n    \n    seal_run = ceo_p.add_run(\"(직인 생략)\")\n    seal_run.font.name = 'HY견고딕'\n    seal_run.font.size = Pt(12)  # 폰트 크기 12로 변경\n    \n    # 추가 공백 삽입 (원본 확인 관련 부분을 더 아래로 내리기)\n    spacer_p = doc.add_paragraph()\n    spacer_p.space_before = Pt(10)\n    spacer_p.space_after = Pt(10)\n    \n    # 문서 확인번호 생성 (이미지와 동일한 형식)\n    doc_verification_code = f\"CERT-2-2-{datetime.now().strftime('%Y%m%d')}\"\n    \n    # 원본 확인 안내문\n    verify_note_p = doc.add_paragraph()\n    verify_note_p.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    verify_note_p.space_before = Pt(0)\n    verify_note_p.space_after = Pt(6)\n    verify_note_run = verify_note_p.add_run(\"※ 아래 바코드로 문서의 진위여부를 확인하실 수 있습니다.\")\n    verify_note_run.font.name = 'HY견고딕'\n    verify_note_run.font.size = Pt(8)\n    verify_note_run.font.bold = True\n    \n    # 가로형 바코드 생성 및 삽입\n    try:\n        # 표 너비에 맞춘 가로형 바코드 생성 (세로 크기 60으로 설정)\n        barcode_img_io = create_barcode(doc_verification_code, width=500, height=60)\n        \n        barcode_p = doc.add_paragraph()\n        barcode_p.alignment = WD_ALIGN_PARAGRAPH.CENTER\n        barcode_p.space_before = Pt(3)\n        barcode_p.space_after = Pt(6)\n        \n        barcode_run = barcode_p.add_run()\n        barcode_run.add_picture(barcode_img_io, width=Cm(16), height=Cm(1.5))  # 세로 크기 1.5cm로 설정\n    except Exception as e:\n        print(f\"바코드 생성 오류: {str(e)}\")\n    \n    # 문서확인번호\n    code_p = doc.add_paragraph()\n    code_p.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    code_p.space_before = Pt(2)\n    code_p.space_after = Pt(0)\n    code_run = code_p.add_run(f\"문서확인번호: {doc_verification_code}\")\n    code_run.font.name = 'HY견고딕'\n    code_run.font.size = Pt(8)\n    \n    # 문서확인 사이트\n    guide_p = doc.add_paragraph()\n    guide_p.alignment = WD_ALIGN_PARAGRAPH.CENTER\n    guide_p.space_before = Pt(1)\n    guide_p.space_after = Pt(0)\n    guide_run = guide_p.add_run(f\"문서확인 사이트: {company_info.website if company_info and company_info.website else 'https://ss-electric.co.kr'}\")\n    guide_run.font.name = 'HY견고딕'\n    guide_run.font.size = Pt(8)\n    \n    # 문서 저장\n    buffer = io.BytesIO()\n    doc.save(buffer)\n    buffer.seek(0)\n    \n    return buffer\n\n\n@employee_bp.route('/download-certificate/<int:certificate_id>')\n@login_required\ndef download_certificate(certificate_id):\n    \"\"\"재직증명서 다운로드\"\"\"\n    certificate = EmploymentCertificate.query.get_or_404(certificate_id)\n    \n    # 권한 확인\n    if certificate.user_id != current_user.id:\n        flash('권한이 없습니다.', 'danger')\n        return redirect(url_for('employee.my_certificates'))\n    \n    # 발급완료 상태인지 확인\n    if certificate.status != CertificateStatus.ISSUED:\n        flash('아직 발급되지 않은 재직증명서입니다.', 'warning')\n        return redirect(url_for('employee.my_certificates'))\n    \n    # 회사 정보 가져오기\n    company_info = CompanyInfo.query.first()\n    company_name = company_info.name if company_info else '주식회사 에스에스전력'\n    ceo_name = company_info.ceo_name if company_info else '대표이사'\n    \n    try:\n        # 워드 문서 생성\n        buffer = create_docx_certificate(certificate, current_user, company_info)\n        \n        # 응답 생성\n        response = make_response(buffer.getvalue())\n        response.headers['Content-Type'] = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n        \n        # 파일명 생성 및 인코딩\n        filename = f'재직증명서_{current_user.name}_{datetime.now().strftime(\"%Y%m%d\")}.docx'\n        encoded_filename = urllib.parse.quote(filename)\n        response.headers['Content-Disposition'] = f'attachment; filename={encoded_filename}'\n        \n        return response\n    except Exception as e:\n        # 오류 발생 시 로그 출력 및 처리\n        print(f\"파일 생성 오류: {str(e)}\")\n        flash('파일 생성 중 오류가 발생했습니다.', 'danger')\n        return redirect(url_for('employee.my_certificates'))\n\n\n@employee_bp.route('/cancel-certificate/<int:certificate_id>', methods=['POST'])\n@login_required\ndef cancel_certificate(certificate_id):\n    \"\"\"재직증명서 신청 취소\"\"\"\n    certificate = EmploymentCertificate.query.get_or_404(certificate_id)\n    \n    # 권한 확인\n    if certificate.user_id != current_user.id:\n        flash('권한이 없습니다.', 'danger')\n        return redirect(url_for('employee.my_certificates'))\n    \n    # 대기 중인 신청만 취소 가능\n    if certificate.status != CertificateStatus.PENDING:\n        flash('대기 중인 재직증명서 신청만 취소할 수 있습니다.', 'danger')\n        return redirect(url_for('employee.my_certificates'))\n    \n    # 취소 처리\n    db.session.delete(certificate)\n    db.session.commit()\n    \n    flash('재직증명서 신청이 취소되었습니다.', 'success')\n    return redirect(url_for('employee.my_certificates'))\n","size_bytes":35774},"forms.py":{"content":"from flask_wtf import FlaskForm\nfrom flask_wtf.file import FileField, FileAllowed\nfrom wtforms import StringField, PasswordField, SubmitField, SelectField, TextAreaField, DateField, IntegerField, HiddenField, FloatField, BooleanField\nfrom wtforms.validators import DataRequired, Email, EqualTo, Length, NumberRange, ValidationError\nfrom datetime import date, datetime\n\nclass LoginForm(FlaskForm):\n    \"\"\"로그인 폼\"\"\"\n    username = StringField('아이디', validators=[DataRequired('아이디를 입력하세요.')])\n    password = PasswordField('비밀번호', validators=[DataRequired('비밀번호를 입력하세요.')])\n    submit = SubmitField('로그인')\n\n\nclass FindIdForm(FlaskForm):\n    \"\"\"아이디 찾기 폼\"\"\"\n    name = StringField('이름', validators=[DataRequired('이름을 입력하세요.')])\n    email = StringField('이메일', validators=[DataRequired('이메일을 입력하세요.'), Email('올바른 이메일 형식이 아닙니다.')])\n    submit = SubmitField('아이디 찾기')\n\n\nclass FindPasswordForm(FlaskForm):\n    \"\"\"비밀번호 찾기 폼\"\"\"\n    username = StringField('아이디', validators=[DataRequired('아이디를 입력하세요.')])\n    email = StringField('이메일', validators=[DataRequired('이메일을 입력하세요.'), Email('올바른 이메일 형식이 아닙니다.')])\n    submit = SubmitField('임시 비밀번호 발급')\n\n\nclass ResetPasswordForm(FlaskForm):\n    \"\"\"비밀번호 재설정 폼\"\"\"\n    new_password = PasswordField('새 비밀번호', validators=[\n        DataRequired('새 비밀번호를 입력하세요.'),\n        Length(min=6, message='비밀번호는 최소 6자 이상이어야 합니다.')\n    ])\n    confirm_password = PasswordField('비밀번호 확인', validators=[\n        DataRequired('비밀번호 확인을 입력하세요.'),\n        EqualTo('new_password', message='비밀번호가 일치하지 않습니다.')\n    ])\n    submit = SubmitField('비밀번호 변경')\n\n\nclass AdminVacationForm(FlaskForm):\n    \"\"\"관리자 휴가 등록 폼\"\"\"\n    user_id = SelectField('직원 선택', validators=[DataRequired('직원을 선택하세요.')], coerce=int)\n    start_date = DateField('시작일', validators=[DataRequired('시작일을 선택하세요.')], format='%Y-%m-%d')\n    end_date = DateField('종료일', validators=[DataRequired('종료일을 선택하세요.')], format='%Y-%m-%d')\n    type = SelectField('휴가 유형', choices=[\n        ('연차', '연차'),\n        ('반차(오전)', '반차(오전)'),\n        ('반차(오후)', '반차(오후)'),\n        ('특별휴가', '특별휴가')\n    ], validators=[DataRequired('휴가 유형을 선택하세요.')])\n    reason = TextAreaField('휴가 사유', validators=[DataRequired('휴가 사유를 입력하세요.')], \n                          render_kw={\"rows\": 3, \"placeholder\": \"휴가 사유를 입력하세요\"})\n    submit = SubmitField('휴가 등록')\n\n    def validate_start_date(self, field):\n        if field.data and field.data < date.today():\n            raise ValidationError('시작일은 오늘 이후여야 합니다.')\n\n    def validate_end_date(self, field):\n        if hasattr(self, 'start_date') and self.start_date.data and field.data < self.start_date.data:\n            raise ValidationError('종료일은 시작일보다 늦어야 합니다.')\n\nclass VacationSearchForm(FlaskForm):\n    \"\"\"휴가 검색 폼 (기간 검색용)\"\"\"\n    employee_name = StringField('직원명', render_kw={\"placeholder\": \"직원명으로 검색 (선택사항)\"})\n    year = SelectField('연도', choices=[], coerce=int)\n    month = SelectField('월', choices=[\n        (0, '전체'),\n        (1, '1월'), (2, '2월'), (3, '3월'), (4, '4월'),\n        (5, '5월'), (6, '6월'), (7, '7월'), (8, '8월'),\n        (9, '9월'), (10, '10월'), (11, '11월'), (12, '12월')\n    ], coerce=int)\n    status = SelectField('상태', choices=[\n        ('all', '전체'),\n        ('대기중', '대기중'),\n        ('승인됨', '승인됨'),\n        ('반려됨', '반려됨')\n    ])\n    department = SelectField('부서', choices=[\n        ('all', '전체'),\n        ('공사팀', '공사팀'),\n        ('공무부', '공무부'),\n        ('경리부', '경리부'),\n        ('인사팀', '인사팀'),\n        ('총무팀', '총무팀'),\n        ('영업팀', '영업팀'),\n        ('안전팀', '안전팀'),\n        ('품질팀', '품질팀'),\n        ('기술팀', '기술팀'),\n        ('관리팀', '관리팀')\n    ])\n    start_date = DateField('시작일', format='%Y-%m-%d', render_kw={\"placeholder\": \"YYYY-MM-DD (선택사항)\"})\n    end_date = DateField('종료일', format='%Y-%m-%d', render_kw={\"placeholder\": \"YYYY-MM-DD (선택사항)\"})\n    submit = SubmitField('검색')\n    export = SubmitField('엑셀 다운로드')\n\n    def __init__(self, *args, **kwargs):\n        super(VacationSearchForm, self).__init__(*args, **kwargs)\n        # 연도 선택지 동적 생성 (현재 년도 기준 -3 ~ +1)\n        current_year = datetime.now().year\n        year_choices = [(0, '전체')]\n        for year in range(current_year - 3, current_year + 2):\n            year_choices.append((year, f'{year}년'))\n        self.year.choices = year_choices\n\n\nclass RegisterForm(FlaskForm):\n    \"\"\"회원가입 폼\"\"\"\n    username = StringField('아이디', validators=[DataRequired('아이디를 입력하세요.'), Length(min=4, max=20, message='아이디는 4-20자 사이여야 합니다.')])\n    email = StringField('이메일', validators=[DataRequired('이메일을 입력하세요.'), Email('올바른 이메일 형식이 아닙니다.')])\n    name = StringField('이름', validators=[DataRequired('이름을 입력하세요.')])\n    resident_id_first = StringField('주민번호 앞자리', validators=[\n        DataRequired('주민번호 앞자리를 입력하세요.'),\n        Length(min=6, max=6, message='주민번호 앞자리는 6자리여야 합니다.')\n    ])\n    resident_id_last_digit = StringField('주민번호 뒷자리 첫번째 숫자', validators=[\n        DataRequired('주민번호 뒷자리 첫번째 숫자를 입력하세요.'),\n        Length(min=1, max=1, message='주민번호 뒷자리 첫번째 숫자만 입력하세요.')\n    ])\n    password = PasswordField('비밀번호', validators=[\n        DataRequired('비밀번호를 입력하세요.'),\n        Length(min=6, message='비밀번호는 최소 6자 이상이어야 합니다.')\n    ])\n    password_confirm = PasswordField('비밀번호 확인', validators=[\n        DataRequired('비밀번호 확인을 입력하세요.'),\n        EqualTo('password', message='비밀번호가 일치하지 않습니다.')\n    ])\n    department = SelectField('부서', choices=[\n        ('', '선택해주세요'),\n        ('공사팀', '공사팀'),\n        ('공무부', '공무부'),\n        ('경리부', '경리부'),\n        ('인사팀', '인사팀'),\n        ('총무팀', '총무팀'),\n        ('영업팀', '영업팀'),\n        ('안전팀', '안전팀'),\n        ('품질팀', '품질팀')\n    ])\n    position = SelectField('직급', choices=[\n        ('', '선택해주세요'),\n        ('대표', '대표'),\n        ('이사', '이사'),\n        ('소장', '소장'),\n        ('부장', '부장'),\n        ('차장', '차장'),\n        ('과장', '과장'),\n        ('대리', '대리'),\n        ('사원', '사원')\n    ])\n    submit = SubmitField('회원가입')\n\n\nclass VacationRequestForm(FlaskForm):\n    \"\"\"휴가 신청 폼\"\"\"\n    start_date = DateField('시작일', validators=[DataRequired('시작일을 선택하세요.')], format='%Y-%m-%d')\n    end_date = DateField('종료일', validators=[DataRequired('종료일을 선택하세요.')], format='%Y-%m-%d')\n    type = SelectField('휴가 유형', choices=[\n        ('연차', '연차'),\n        ('반차(오전)', '반차(오전)'),\n        ('반차(오후)', '반차(오후)'),\n        ('특별휴가', '특별휴가')\n    ], validators=[DataRequired('휴가 유형을 선택하세요.')])\n    reason = TextAreaField('휴가 사유')\n    days = HiddenField('휴가 일수')  # 자동 계산되는 필드\n    submit = SubmitField('휴가 신청')\n\n    def validate_end_date(self, field):\n        if self.start_date.data and field.data and field.data < self.start_date.data:\n            raise ValidationError('종료일은 시작일보다 빠를 수 없습니다.')\n        if self.start_date.data and self.start_date.data < date.today():\n            raise ValidationError('과거 날짜로는 휴가를 신청할 수 없습니다.')\n\n\nclass VacationApprovalForm(FlaskForm):\n    \"\"\"휴가 승인/반려 폼\"\"\"\n    request_id = HiddenField('요청 ID')\n    status = SelectField('상태', choices=[\n        ('승인됨', '승인'),\n        ('반려됨', '반려')\n    ], validators=[DataRequired('상태를 선택하세요.')])\n    comments = TextAreaField('코멘트')\n    submit = SubmitField('처리')\n\n\nclass EmployeeVacationDaysForm(FlaskForm):\n    \"\"\"직원 연간 휴가일수 설정 폼\"\"\"\n    user_id = HiddenField('사용자 ID')\n    year = IntegerField('연도', validators=[DataRequired('연도를 입력하세요.')])\n    total_days = FloatField('총 휴가일수', validators=[\n        DataRequired('휴가일수를 입력하세요.'),\n        NumberRange(min=0, message='휴가일수는 0 이상이어야 합니다.')\n    ])\n    submit = SubmitField('설정')\n\n\nclass HolidayForm(FlaskForm):\n    \"\"\"공휴일 등록 폼\"\"\"\n    date = DateField('날짜', validators=[DataRequired('날짜를 선택하세요.')], format='%Y-%m-%d')\n    name = StringField('공휴일명', validators=[DataRequired('공휴일명을 입력하세요.')])\n    submit = SubmitField('등록')\n\n\nclass EmploymentCertificateRequestForm(FlaskForm):\n    \"\"\"재직증명서 신청 폼\"\"\"\n    purpose = StringField('사용 목적', validators=[\n        DataRequired('사용 목적을 입력하세요.'), \n        Length(max=200, message='사용 목적은 200자를 초과할 수 없습니다.')\n    ])\n    submit = SubmitField('재직증명서 신청')\n\n\nclass CertificateApprovalForm(FlaskForm):\n    \"\"\"재직증명서 승인/반려 폼\"\"\"\n    certificate_id = HiddenField('요청 ID')\n    status = SelectField('상태', choices=[\n        ('발급완료', '발급'),\n        ('반려됨', '반려')\n    ], validators=[DataRequired('상태를 선택하세요.')])\n    comments = TextAreaField('코멘트')\n    submit = SubmitField('처리')\n\n\nclass AdminCertificateIssueForm(FlaskForm):\n    \"\"\"관리자 직접 증명서 발행 폼\"\"\"\n    user_id = SelectField('직원 선택', coerce=int, validators=[DataRequired('직원을 선택하세요.')])\n    purpose = StringField('사용 목적', validators=[\n        DataRequired('사용 목적을 입력하세요.'), \n        Length(max=200, message='사용 목적은 200자를 초과할 수 없습니다.')\n    ], render_kw={\"placeholder\": \"예: 대출신청용, 입찰참가용 등\"})\n    comments = TextAreaField('관리자 메모', render_kw={\"placeholder\": \"내부 기록용 메모 (선택사항)\"})\n    submit = SubmitField('즉시 발급')\n\n\nclass CompanyInfoForm(FlaskForm):\n    \"\"\"회사 정보 관리 폼\"\"\"\n    name = StringField('회사명', validators=[DataRequired('회사명을 입력하세요.')])\n    ceo_name = StringField('대표자명', validators=[DataRequired('대표자명을 입력하세요.')])\n    registration_number = StringField('사업자등록번호')\n    address = StringField('회사 주소')\n    phone = StringField('전화번호')\n    fax = StringField('팩스번호')\n    website = StringField('웹사이트')\n    stamp_image = TextAreaField('직인 이미지')\n    submit = SubmitField('저장')\n\n\nclass EmployeeHireDateForm(FlaskForm):\n    \"\"\"직원 입사일 설정 폼\"\"\"\n    user_id = HiddenField('사용자 ID')\n    hire_date = DateField('입사일', validators=[DataRequired('입사일을 선택하세요.')], format='%Y-%m-%d')\n    submit = SubmitField('저장')\n\n\nclass BulkUploadForm(FlaskForm):\n    \"\"\"직원 대량 업로드 폼\"\"\"\n    file = FileField('엑셀 파일', validators=[\n        DataRequired('업로드할 파일을 선택하세요.'),\n        FileAllowed(['xlsx', 'xls'], '엑셀 파일만 업로드 가능합니다.')\n    ])\n    submit = SubmitField('업로드')\n\nclass EmployeeRegistrationForm(FlaskForm):\n    \"\"\"직원 등록 폼\"\"\"\n    username = StringField('아이디', validators=[\n        DataRequired('아이디를 입력하세요.'),\n        Length(min=3, max=20, message='아이디는 3-20자여야 합니다.')\n    ], render_kw={\"placeholder\": \"영문, 숫자, 언더스코어만 사용\"})\n    \n    name = StringField('이름', validators=[\n        DataRequired('이름을 입력하세요.'),\n        Length(min=2, max=10, message='이름은 2-10자여야 합니다.')\n    ], render_kw={\"placeholder\": \"실명을 입력하세요\"})\n    \n    email = StringField('이메일', validators=[\n        DataRequired('이메일을 입력하세요.'),\n        Email('올바른 이메일 형식이 아닙니다.')\n    ], render_kw={\"placeholder\": \"예: hong@sspower.com\"})\n    \n    password = PasswordField('초기 비밀번호', validators=[\n        DataRequired('초기 비밀번호를 입력하세요.'),\n        Length(min=6, message='비밀번호는 최소 6자 이상이어야 합니다.')\n    ], render_kw={\"placeholder\": \"최소 6자 이상\"})\n    \n    confirm_password = PasswordField('비밀번호 확인', validators=[\n        DataRequired('비밀번호 확인을 입력하세요.'),\n        EqualTo('password', message='비밀번호가 일치하지 않습니다.')\n    ])\n    \n    resident_id_first = StringField('주민번호 앞자리', validators=[\n        DataRequired('주민번호 앞자리를 입력하세요.'),\n        Length(min=6, max=6, message='주민번호 앞자리는 6자리입니다.')\n    ], render_kw={\"placeholder\": \"예: 920315\"})\n    \n    resident_id_last_digit = SelectField('주민번호 뒷자리 첫번째', choices=[\n        ('1', '1'),\n        ('2', '2'),\n        ('3', '3'),\n        ('4', '4')\n    ], validators=[DataRequired('주민번호 뒷자리 첫번째 숫자를 선택하세요.')])\n    \n    department = SelectField('부서', choices=[\n        ('공사팀', '공사팀'),\n        ('영업팀', '영업팀'),\n        ('경리부', '경리부'),\n        ('안전팀', '안전팀'),\n        ('인사팀', '인사팀'),\n        ('기술팀', '기술팀'),\n        ('관리팀', '관리팀')\n    ], validators=[DataRequired('부서를 선택하세요.')])\n    \n    position = SelectField('직급', choices=[\n        ('사원', '사원'),\n        ('주임', '주임'),\n        ('대리', '대리'),\n        ('과장', '과장'),\n        ('차장', '차장'),\n        ('부장', '부장'),\n        ('이사', '이사')\n    ], validators=[DataRequired('직급을 선택하세요.')])\n    \n    hire_date = DateField('입사일', validators=[DataRequired('입사일을 선택하세요.')], format='%Y-%m-%d')\n    \n    submit = SubmitField('직원 등록')\n    \n    def validate_username(self, field):\n        from models import User\n        user = User.query.filter_by(username=field.data).first()\n        if user:\n            raise ValidationError('이미 사용 중인 아이디입니다.')\n    \n    def validate_email(self, field):\n        from models import User\n        user = User.query.filter_by(email=field.data).first()\n        if user:\n            raise ValidationError('이미 사용 중인 이메일입니다.')\n    \n    def validate_hire_date(self, field):\n        if field.data and field.data > date.today():\n            raise ValidationError('입사일은 오늘 이전이어야 합니다.')\n","size_bytes":15647},"holidays.py":{"content":"from app import db\nfrom models import Holiday\nfrom datetime import date\n\ndef add_korean_holidays(year):\n    \"\"\"한국 공휴일 추가\"\"\"\n    holidays = []\n    \n    if year == 2025:\n        holidays = [\n            # 2025년 공휴일\n            # 신정\n            (date(2025, 1, 1), \"신정\"),\n            # 설날\n            (date(2025, 1, 29), \"설날 연휴 (첫째날)\"),\n            (date(2025, 1, 30), \"설날\"),\n            (date(2025, 1, 31), \"설날 연휴 (마지막날)\"),\n            # 삼일절\n            (date(2025, 3, 1), \"삼일절\"),\n            # 어린이날\n            (date(2025, 5, 5), \"어린이날 (대체공휴일)\"),\n            # 석가탄신일\n            (date(2025, 5, 6), \"석가탄신일\"),\n            # 현충일\n            (date(2025, 6, 6), \"현충일\"),\n            # 광복절\n            (date(2025, 8, 15), \"광복절\"),\n            # 추석\n            (date(2025, 9, 8), \"추석 연휴 (첫째날)\"),\n            (date(2025, 9, 9), \"추석\"),\n            (date(2025, 9, 10), \"추석 연휴 (마지막날)\"),\n            # 개천절\n            (date(2025, 10, 3), \"개천절\"),\n            # 한글날\n            (date(2025, 10, 9), \"한글날\"),\n            # 크리스마스\n            (date(2025, 12, 25), \"성탄절\")\n        ]\n    elif year == 2026:\n        holidays = [\n            # 2026년 공휴일\n            # 신정\n            (date(2026, 1, 1), \"신정\"),\n            # 설날\n            (date(2026, 2, 17), \"설날 연휴 (첫째날)\"),\n            (date(2026, 2, 18), \"설날\"),\n            (date(2026, 2, 19), \"설날 연휴 (마지막날)\"),\n            # 삼일절\n            (date(2026, 3, 1), \"삼일절\"),\n            # 어린이날\n            (date(2026, 5, 5), \"어린이날\"),\n            # 석가탄신일\n            (date(2026, 5, 24), \"석가탄신일\"),\n            # 현충일\n            (date(2026, 6, 6), \"현충일\"),\n            # 광복절\n            (date(2026, 8, 15), \"광복절\"),\n            # 추석\n            (date(2026, 9, 25), \"추석 연휴 (첫째날)\"),\n            (date(2026, 9, 26), \"추석\"),\n            (date(2026, 9, 27), \"추석 연휴 (마지막날)\"),\n            # 개천절\n            (date(2026, 10, 3), \"개천절\"),\n            # 한글날\n            (date(2026, 10, 9), \"한글날\"),\n            # 크리스마스\n            (date(2026, 12, 25), \"성탄절\")\n        ]\n    else:\n        # 기본 공휴일 (년도 별 정확한 날짜가 없을 경우)\n        holidays = [\n            # 신정\n            (date(year, 1, 1), \"신정\"),\n            # 삼일절\n            (date(year, 3, 1), \"삼일절\"),\n            # 어린이날\n            (date(year, 5, 5), \"어린이날\"),\n            # 현충일\n            (date(year, 6, 6), \"현충일\"),\n            # 광복절\n            (date(year, 8, 15), \"광복절\"),\n            # 개천절\n            (date(year, 10, 3), \"개천절\"),\n            # 한글날\n            (date(year, 10, 9), \"한글날\"),\n            # 크리스마스\n            (date(year, 12, 25), \"성탄절\")\n        ]\n    \n    # 이미 등록된 공휴일 제외\n    existing_holidays = Holiday.query.filter(\n        db.extract('year', Holiday.date) == year\n    ).all()\n    existing_dates = [h.date for h in existing_holidays]\n    \n    for holiday_date, holiday_name in holidays:\n        if holiday_date not in existing_dates:\n            holiday = Holiday(date=holiday_date, name=holiday_name)\n            db.session.add(holiday)\n    \n    db.session.commit()\n","size_bytes":3517},"main.py":{"content":"from app import app  # noqa: F401\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n","size_bytes":113},"models.py":{"content":"from app import db\nfrom flask_login import UserMixin\nfrom datetime import datetime\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\n# 사용자 역할 정의\nclass Role:\n    EMPLOYEE = 'employee'\n    ADMIN = 'admin'\n\n# 휴가 상태 정의\nclass VacationStatus:\n    PENDING = '대기중'\n    APPROVED = '승인됨'\n    REJECTED = '반려됨'\n\nclass CompanyInfo(db.Model):\n    \"\"\"회사 정보 모델\"\"\"\n    __tablename__ = 'company_info'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)  # 회사명\n    ceo_name = db.Column(db.String(50), nullable=False)  # 대표자명\n    registration_number = db.Column(db.String(30))  # 사업자등록번호\n    address = db.Column(db.String(200))  # 회사 주소\n    phone = db.Column(db.String(20))  # 전화번호\n    fax = db.Column(db.String(20))  # 팩스번호\n    website = db.Column(db.String(100))  # 웹사이트\n    stamp_image = db.Column(db.Text)  # 직인 이미지 (base64)\n    \n    def __repr__(self):\n        return f'<CompanyInfo {self.name}>'\n\n\nclass User(UserMixin, db.Model):\n    __tablename__ = 'users'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256), nullable=False)\n    name = db.Column(db.String(100), nullable=False)  # 사용자 실명\n    resident_id_first = db.Column(db.String(6))  # 주민번호 앞자리\n    resident_id_last_digit = db.Column(db.String(1))  # 주민번호 뒷자리 첫번째 숫자\n    role = db.Column(db.String(20), nullable=False, default=Role.EMPLOYEE)  # 역할 (직원/관리자)\n    department = db.Column(db.String(50))  # 부서\n    position = db.Column(db.String(50))  # 직급\n    hire_date = db.Column(db.Date)  # 입사일\n    created_at = db.Column(db.DateTime, default=datetime.now)\n    \n    # 관계 설정\n    vacation_days = db.relationship('VacationDays', backref='user', lazy='dynamic')\n    vacation_requests = db.relationship('VacationRequest', backref='user', foreign_keys='VacationRequest.user_id')\n    \n    def set_password(self, password):\n        # 명시적으로 해시 메소드 지정 (pbkdf2:sha256)\n        self.password_hash = generate_password_hash(password, method='pbkdf2:sha256')\n        \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n    \n    def is_admin(self):\n        return self.role == Role.ADMIN\n\n    def __repr__(self):\n        return f'<User {self.username}>'\n\n\nclass VacationDays(db.Model):\n    __tablename__ = 'vacation_days'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    year = db.Column(db.Integer, nullable=False)  # 연도\n    total_days = db.Column(db.Integer, nullable=False, default=15)  # 총 휴가 일수\n    used_days = db.Column(db.Float, nullable=False, default=0)  # 사용한 휴가 일수 (반차 지원을 위해 Float 타입)\n    \n    def remaining_days(self):\n        \"\"\"남은 휴가 일수 계산\"\"\"\n        return self.total_days - self.used_days\n    \n    def __repr__(self):\n        return f'<VacationDays {self.user_id} {self.year}>'\n\n\nclass VacationRequest(db.Model):\n    __tablename__ = 'vacation_requests'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    start_date = db.Column(db.Date, nullable=False)  # 휴가 시작일\n    end_date = db.Column(db.Date, nullable=False)  # 휴가 종료일\n    days = db.Column(db.Float, nullable=False)  # 휴가 일수 (반차 지원을 위해 Float 타입)\n    reason = db.Column(db.Text)  # 휴가 사유\n    status = db.Column(db.String(20), nullable=False, default=VacationStatus.PENDING)  # 휴가 상태\n    type = db.Column(db.String(20), nullable=False, default='연차')  # 휴가 종류 (연차, 반차, 특별휴가 등)\n    \n    # 관리자 승인/반려 정보\n    approved_by = db.Column(db.Integer, db.ForeignKey('users.id'))  # 승인/반려한 관리자\n    approval_date = db.Column(db.DateTime)  # 승인/반려 날짜\n    comments = db.Column(db.Text)  # 관리자 코멘트\n    \n    created_at = db.Column(db.DateTime, default=datetime.now)  # 신청 날짜\n    \n    # 관계 설정\n    approver = db.relationship('User', foreign_keys=[approved_by])\n    \n    def __repr__(self):\n        return f'<VacationRequest {self.id} {self.user_id} {self.status}>'\n\n\n# 재직증명서 상태 정의\nclass CertificateStatus:\n    PENDING = '대기중'\n    ISSUED = '발급완료'\n    REJECTED = '반려됨'\n\n\nclass EmploymentCertificate(db.Model):\n    \"\"\"재직증명서 모델\"\"\"\n    __tablename__ = 'employment_certificates'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    purpose = db.Column(db.String(200), nullable=False)  # 사용 목적\n    issued_date = db.Column(db.Date)  # 발급일\n    status = db.Column(db.String(20), nullable=False, default=CertificateStatus.PENDING)  # 상태\n    \n    # 관리자 승인/반려 정보\n    approved_by = db.Column(db.Integer, db.ForeignKey('users.id'))  # 승인/반려한 관리자\n    approval_date = db.Column(db.DateTime)  # 승인/반려 날짜\n    comments = db.Column(db.Text)  # 관리자 코멘트\n    \n    created_at = db.Column(db.DateTime, default=datetime.now)  # 신청 날짜\n    \n    # 관계 설정\n    user = db.relationship('User', foreign_keys=[user_id], backref='certificates')\n    approver = db.relationship('User', foreign_keys=[approved_by])\n    \n    def __repr__(self):\n        return f'<EmploymentCertificate {self.id} {self.user_id} {self.status}>'\n\n\nclass Holiday(db.Model):\n    \"\"\"공휴일 관리 모델\"\"\"\n    __tablename__ = 'holidays'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    date = db.Column(db.Date, nullable=False, unique=True)\n    name = db.Column(db.String(100), nullable=False)\n    \n    def __repr__(self):\n        return f'<Holiday {self.date} {self.name}>'\n","size_bytes":6176},"nixpacks.toml":{"content":"[phases.setup]\nnixPkgs = [\"python311\"]\n\n[phases.install]\ncmds = [\n    \"pip install --upgrade pip\",\n    \"pip install -r requirements-railway.txt --no-cache-dir\"\n]\n\n[phases.build]\ncmds = [\n    \"chmod +x start.sh\",\n    \"python optimize_performance.py\"\n]\n\n[start]\ncmd = \"./start.sh\"\n\n[variables]\nPYTHONUNBUFFERED = \"1\"\nFLASK_ENV = \"production\"\n","size_bytes":340},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-login>=0.6.3\",\n    \"flask>=3.1.0\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"flask-wtf>=1.2.2\",\n    \"sqlalchemy>=2.0.40\",\n    \"werkzeug>=3.1.3\",\n    \"wtforms>=3.2.1\",\n    \"weasyprint>=65.1\",\n    \"reportlab>=4.4.0\",\n    \"pillow>=11.2.1\",\n    \"python-docx>=1.1.2\",\n    \"docx>=0.2.4\",\n    \"openpyxl>=3.1.5\",\n    \"xlrd>=2.0.1\",\n    \"pandas>=2.2.3\",\n]\n","size_bytes":579},"railway-deployment-guide.md":{"content":"# Railway 배포 가이드 - 에스에스전력 휴가관리시스템\n\n## 배포 준비사항\n\n### 1. 필요한 파일들\n- `railway.json` - Railway 배포 설정\n- `requirements-railway.txt` - Python 패키지 의존성\n- `Procfile` - 애플리케이션 시작 명령어\n- `start.sh` - 초기화 스크립트\n- `nixpacks.toml` - Nixpacks 빌드 설정\n\n### 2. 환경변수 설정\nRailway 대시보드에서 다음 환경변수들을 설정하세요:\n\n#### 필수 환경변수\n```\nDATABASE_URL=postgresql://username:password@host:port/database\nSESSION_SECRET=your-secure-session-secret-key\n```\n\n#### 선택적 환경변수\n```\nFLASK_ENV=production\nPYTHONPATH=/app\n```\n\n## Railway 배포 단계\n\n### 1. GitHub Repository 연결\n1. Railway 대시보드에서 \"New Project\" 클릭\n2. \"Deploy from GitHub repo\" 선택\n3. 프로젝트 저장소 선택\n\n### 2. PostgreSQL 데이터베이스 추가\n1. Railway 프로젝트에서 \"Add Service\" 클릭\n2. \"Database\" → \"PostgreSQL\" 선택\n3. 데이터베이스가 생성되면 `DATABASE_URL` 환경변수가 자동으로 설정됨\n\n### 3. 환경변수 설정\n1. Railway 대시보드에서 Variables 탭 이동\n2. `SESSION_SECRET` 환경변수 추가:\n   ```\n   SESSION_SECRET=super-secure-secret-key-for-production\n   ```\n\n### 4. 도메인 설정\n1. Settings 탭에서 \"Generate Domain\" 클릭\n2. 커스텀 도메인 설정 (선택사항)\n\n## 배포 후 확인사항\n\n### 1. 애플리케이션 상태 확인\n- Railway 로그에서 시작 메시지 확인\n- 데이터베이스 연결 상태 확인\n- 관리자 계정 생성 확인\n\n### 2. 관리자 계정 로그인\n- 사용자명: `admin`\n- 비밀번호: `admin123`\n\n### 3. 기능 테스트\n- 직원 등록 기능\n- 휴가 신청/승인 기능\n- 재직증명서 발급 기능\n\n## 배포 설정 파일들\n\n### railway.json\n```json\n{\n  \"$schema\": \"https://railway.app/railway.schema.json\",\n  \"build\": {\n    \"builder\": \"NIXPACKS\"\n  },\n  \"deploy\": {\n    \"startCommand\": \"./start.sh\",\n    \"healthcheckPath\": \"/\",\n    \"healthcheckTimeout\": 100,\n    \"restartPolicyType\": \"ON_FAILURE\",\n    \"restartPolicyMaxRetries\": 10\n  }\n}\n```\n\n### Procfile\n```\nweb: ./start.sh\n```\n\n## 트러블슈팅\n\n### 데이터베이스 연결 오류\n- `DATABASE_URL` 환경변수가 올바르게 설정되었는지 확인\n- PostgreSQL 서비스가 실행 중인지 확인\n\n### 세션 오류\n- `SESSION_SECRET` 환경변수가 설정되었는지 확인\n- 충분히 복잡한 시크릿 키를 사용\n\n### 빌드 오류\n- `requirements-railway.txt`의 패키지 버전 확인\n- Python 버전 호환성 확인\n\n## 유지보수\n\n### 로그 모니터링\nRailway 대시보드의 Logs 탭에서 애플리케이션 로그 확인\n\n### 데이터베이스 백업\nRailway PostgreSQL 서비스의 자동 백업 기능 활용\n\n### 업데이트 배포\nGitHub에 코드 푸시 시 자동으로 재배포됨","size_bytes":2849},"render-build-fix.md":{"content":"# Render 배포 오류 수정\n\n## 문제점\nBuild Command에서 `requirements-railway.txt` 파일을 찾지 못함\nRender에서는 `requirements-render.txt` 파일을 사용해야 함\n\n## 수정된 Build Command (복사해서 사용):\n\n```bash\napt-get update -y && apt-get install -y build-essential fonts-nanum fonts-noto-cjk libpango-1.0-0 libpangoft2-1.0-0 && pip install --upgrade pip && pip install -r requirements-render.txt && python3 create_admin.py && python3 add_holidays.py\n```\n\n## Render Settings에서 수정 방법:\n\n1. Render 대시보드에서 서비스 선택\n2. \"Settings\" 탭 클릭\n3. \"Build & Deploy\" 섹션에서 \"Build Command\" 수정\n4. 위의 수정된 명령어로 교체\n5. \"Save Changes\" 클릭\n6. \"Manual Deploy\" → \"Deploy latest commit\" 클릭하여 재배포\n\n## 또는 간단한 Build Command:\n\n만약 위 명령어가 너무 길다면, 더 간단한 버전:\n\n```bash\npip install -r requirements-render.txt && python3 create_admin.py && python3 add_holidays.py\n```\n\n한글 PDF 생성이 필요 없다면 폰트 설치 부분을 제거할 수 있습니다.","size_bytes":1089},"render-deployment-guide.md":{"content":"# Render 배포 가이드 - 에스에스전력 휴가관리시스템\n\n## Render 배포 설정 정보\n\n### Build Command\n```bash\napt-get update -y && apt-get install -y build-essential fonts-nanum fonts-noto-cjk libpango-1.0-0 libpangoft2-1.0-0 && pip install --upgrade pip && pip install -r requirements-render.txt && python3 create_admin.py && python3 add_holidays.py\n```\n\n### Start Command\n```bash\ngunicorn --bind 0.0.0.0:$PORT --workers 1 --timeout 120 main:app\n```\n\n### Publish Directory\n```\n. (현재 디렉토리 - 루트)\n```\n\n## 수동 배포 단계별 설정\n\n### 1. New Web Service 생성\n1. [Render](https://render.com)에서 계정 생성/로그인\n2. \"New\" → \"Web Service\" 클릭\n3. GitHub 저장소 연결\n\n### 2. 기본 설정\n- **Name**: `sselectric-vacation-system`\n- **Region**: `Oregon (US West)`\n- **Branch**: `main`\n- **Runtime**: `Python 3`\n\n### 3. Build & Deploy 설정\n**Build Command**:\n```bash\napt-get update -y && apt-get install -y build-essential fonts-nanum fonts-noto-cjk libpango-1.0-0 libpangoft2-1.0-0 && pip install --upgrade pip && pip install -r requirements-render.txt && python3 create_admin.py && python3 add_holidays.py\n```\n\n**Start Command**:\n```bash\ngunicorn --bind 0.0.0.0:$PORT --workers 1 --timeout 120 main:app\n```\n\n**Publish Directory**: `. (비워두거나 점 입력)`\n\n### 4. 환경변수 설정\nEnvironment 탭에서 다음 변수들 추가:\n\n#### 필수 환경변수\n- `SESSION_SECRET`: `강력한-세션-비밀키-입력`\n- `PYTHON_VERSION`: `3.11.0`\n- `PYTHONUNBUFFERED`: `true`\n- `PYTHONIOENCODING`: `utf-8`\n\n#### PostgreSQL 데이터베이스 (선택사항)\n- `DATABASE_URL`: PostgreSQL 연결 URL (없으면 SQLite 사용)\n\n### 5. PostgreSQL 데이터베이스 추가 (선택사항)\n1. \"New\" → \"PostgreSQL\" 클릭\n2. 데이터베이스 생성 후 Internal Database URL 복사\n3. Web Service 환경변수에 `DATABASE_URL` 추가\n\n## 자동 배포 설정 (render.yaml 사용)\n\n프로젝트에 이미 `render.yaml` 파일이 포함되어 있습니다:\n\n### 1. GitHub에서 직접 배포\n1. Render 대시보드에서 \"New\" → \"Blueprint\" 선택\n2. GitHub 저장소 연결\n3. `render.yaml` 파일이 자동으로 감지됨\n\n### 2. 환경변수만 설정\n- `SESSION_SECRET`: 자동 생성됨\n- `DATABASE_URL`: PostgreSQL 서비스와 자동 연결\n\n## 시스템 특징\n\n### 자동 초기화\n- 관리자 계정 (admin/admin123) 자동 생성\n- 2025-2026년 공휴일 자동 등록\n- PostgreSQL 우선, SQLite 폴백\n\n### 한글 폰트 지원\n- Nanum 폰트 패키지 설치\n- PDF 문서 생성 지원\n- 한글 텍스트 완전 지원\n\n### 성능 최적화\n- Gunicorn WSGI 서버\n- 단일 워커 프로세스\n- 120초 타임아웃 설정\n\n## 배포 후 확인사항\n\n### 1. 애플리케이션 접속\n생성된 Render URL로 접속하여 로그인 페이지 확인\n\n### 2. 관리자 로그인\n- 사용자명: `admin`\n- 비밀번호: `admin123`\n\n### 3. 기능 테스트\n- 직원 등록\n- 휴가 신청/승인\n- 재직증명서 발급\n\n## 트러블슈팅\n\n### 빌드 실패 시\n- Build Command가 정확히 입력되었는지 확인\n- 한 줄로 입력 (줄바꿈 없이)\n\n### 실행 오류 시\n- Start Command 확인: `gunicorn --bind 0.0.0.0:$PORT --workers 1 --timeout 120 main:app`\n- 환경변수 `SESSION_SECRET` 설정 확인\n\n### 데이터베이스 연결 오류\n- PostgreSQL 서비스가 생성되었는지 확인\n- `DATABASE_URL` 환경변수가 올바른지 확인\n- SQLite 폴백 메시지 확인 (정상 동작)\n\n## 비용 정보\n\n### Free Plan 제한\n- 월 750시간 실행 (31일 기준 744시간)\n- 15분 비활성 후 슬립 모드\n- PostgreSQL 90일 후 만료\n\n### Starter Plan ($7/월)\n- 무제한 실행 시간\n- 슬립 모드 없음\n- 영구 PostgreSQL\n\nRender는 무료 플랜으로도 충분히 테스트 및 소규모 운영이 가능합니다.","size_bytes":3821},"render-fix-command.md":{"content":"# Render 배포 오류 해결 - apt-get 문제\n\n## 문제점\nRender 빌드 환경에서는 `apt-get` 명령어 사용이 제한됨\n읽기 전용 파일 시스템으로 인해 시스템 패키지 설치 불가\n\n## 해결책: 간단한 Build Command 사용\n\n### 수정된 Build Command (복사해서 사용):\n```bash\npip install --upgrade pip && pip install -r requirements-render.txt && python3 create_admin.py && python3 add_holidays.py\n```\n\n## Render Settings에서 수정 방법:\n\n1. Render 대시보드에서 서비스 선택\n2. **Settings** 탭 클릭\n3. **Build & Deploy** 섹션에서 **Build Command** 수정\n4. 위의 간단한 명령어로 교체\n5. **Save Changes** 클릭\n6. **Manual Deploy** → **Deploy latest commit** 클릭\n\n## 주의사항:\n- 한글 폰트가 설치되지 않아 PDF 생성시 한글이 깨질 수 있음\n- 하지만 웹 애플리케이션 자체는 정상 작동\n- 필요시 PDF 생성 기능은 weasyprint 대신 reportlab 사용","size_bytes":965},"render.yaml":{"content":"services:\n  - type: web\n    name: sselectric-vacation-system\n    env: python\n    buildCommand: |\n      pip install --upgrade pip\n      pip install -r requirements-render.txt\n    startCommand: gunicorn --bind 0.0.0.0:$PORT --workers 1 --timeout 120 main:app\n    plan: free\n    envVars:\n      - key: DATABASE_URL\n        sync: false\n      - key: SESSION_SECRET\n        generateValue: true\n      - key: PYTHON_VERSION\n        value: 3.11.0\n      - key: PYTHONUNBUFFERED\n        value: \"true\"\n      - key: PYTHONIOENCODING\n        value: \"utf-8\"\n    autoDeploy: true","size_bytes":562},"replit.md":{"content":"# Overview\n\nThis is a Korean vacation management system (휴가관리시스템) built for \"SS Power Corporation\" (에스에스전력). The system allows employees to request vacation time and enables administrators to manage employee vacation requests, holidays, and employment certificates. The application is built using Flask and is designed to be deployed on cloud platforms like Railway or Render.\n\n# System Architecture\n\nThe application follows a traditional Flask web application architecture with the following key components:\n\n## Backend Architecture\n- **Framework**: Flask 2.2.5 with SQLAlchemy for database operations\n- **Authentication**: Flask-Login for session management\n- **Forms**: WTForms with Flask-WTF for form handling and validation\n- **Templates**: Jinja2 templating engine with responsive design using Tailwind CSS\n\n## Database Architecture\n- **Primary Database**: PostgreSQL (with SQLite fallback for development)\n- **ORM**: SQLAlchemy with declarative base model\n- **Connection Management**: Connection pooling with automatic reconnection\n\n## Frontend Architecture\n- **CSS Framework**: Tailwind CSS for responsive design\n- **JavaScript**: Vanilla JavaScript with Alpine.js for interactive components\n- **UI Components**: Custom components with government-style theming\n- **Icons**: Font Awesome 6.0 for iconography\n\n# Key Components\n\n## User Management\n- **Role-based Access Control**: Two main roles (Employee and Admin)\n- **Authentication System**: Username/password with secure password hashing\n- **User Registration**: Self-registration with department/position selection\n\n## Vacation Management\n- **Vacation Requests**: Employees can submit vacation requests with date ranges\n- **Approval Workflow**: Administrators can approve/reject requests\n- **Holiday Management**: System tracks Korean national holidays\n- **Vacation Calculation**: Automatic calculation excluding weekends and holidays\n\n## Document Generation\n- **Employment Certificates**: PDF generation using ReportLab\n- **Word Documents**: Document generation using python-docx\n- **Template System**: Customizable document templates\n\n## Data Import/Export\n- **Excel Integration**: Bulk employee import via Excel files using pandas/openpyxl\n- **CSV Export**: Export vacation data for reporting\n- **Template Downloads**: Sample file templates for bulk operations\n\n# Data Flow\n\n## Vacation Request Flow\n1. Employee submits vacation request through web form\n2. System validates dates and calculates business days\n3. Request stored in database with \"pending\" status\n4. Administrator reviews and approves/rejects request\n5. System updates vacation balances automatically\n\n## Authentication Flow\n1. User submits credentials via login form\n2. System validates against stored password hash\n3. Flask-Login manages session state\n4. Role-based redirects to appropriate dashboard\n\n## Document Generation Flow\n1. User/Admin initiates document request\n2. System retrieves relevant data from database\n3. Template engine generates document (PDF/Word)\n4. Document served as download or stored for later access\n\n# External Dependencies\n\n## Core Dependencies\n- **Flask 2.2.5**: Web framework\n- **SQLAlchemy 2.0.29**: Database ORM\n- **psycopg2-binary 2.9.9**: PostgreSQL adapter\n- **Werkzeug 2.2.3**: WSGI utilities\n\n## Document Processing\n- **python-docx 0.8.11**: Word document generation\n- **reportlab 4.1.0**: PDF generation\n- **Pillow 10.2.0**: Image processing\n- **weasyprint 59.0**: Alternative PDF generation\n\n## Data Processing\n- **pandas 2.1.4**: Excel file processing\n- **openpyxl 3.1.2**: Excel file handling\n- **xlrd 2.0.1**: Excel file reading\n\n## Deployment\n- **gunicorn 21.2.0**: WSGI server for production\n- **System dependencies**: Font packages for PDF generation (via apt.txt)\n\n# Deployment Strategy\n\n## Cloud Platform Support\n- **Railway**: Configured with railway.json for automatic deployment\n- **Render**: Separate requirements file for Render-specific dependencies\n- **Database**: PostgreSQL with automatic URL conversion from postgres:// to postgresql://\n\n## Production Configuration\n- **WSGI Server**: Gunicorn with single worker configuration\n- **Static Files**: Served directly by Flask in development\n- **Environment Variables**: Database URL and session secrets via environment\n- **Health Checks**: Root path health check endpoint\n\n## Database Management\n- **Automatic Migration**: Tables created automatically on startup\n- **Connection Pooling**: Configured for production reliability\n- **Backup Strategy**: Relies on cloud provider database backups\n\n# Changelog\n\n- August 10, 2025: 배포 준비 완료 및 영구 저장 시스템 구현\n  - 관리자 직원 휴가 등록 기능 완전 구현 (AdminVacationForm, /admin/add_vacation)\n  - 휴가 일수 계산 및 반차 처리 로직 개선 (utils.py 업데이트)\n  - 테스트 직원 5명 자동 생성 (test_emp1~5, 비밀번호: test123)\n  - 데이터베이스 백업 시스템 구현 (backup_database.py)\n  - 배포 준비 점검 스크립트 작성 (deploy_setup.py)\n  - 영구 SQLite 데이터베이스 설정 완료 (instance/vacation_permanent.db)\n  - 하단 푸터 회사 연락처 정보 제거\n  - DEPLOYMENT_GUIDE.md 배포 가이드 생성\n- August 5, 2025: 사용자 계정 복구 및 고급 휴가 관리 기능 추가\n  - 로그인 페이지에 아이디/패스워드 찾기 기능 구현 (FindIdForm, FindPasswordForm, ResetPasswordForm)\n  - 전직원 휴가현황 및 개인별 휴가현황에 고급 검색 기능 추가 (VacationSearchForm)\n  - 기간별, 부서별, 상태별 휴가 검색 및 필터링 기능\n  - 엑셀 출력 기능 구현 (pandas + openpyxl 활용)\n  - 정부 스타일 UI로 일관된 디자인 적용\n- August 5, 2025: Railway 배포 환경 완전 구성\n  - PostgreSQL 우선, SQLite 폴백 시스템 구현\n  - 영구 데이터베이스 (instance/vacation_permanent.db) 설정\n  - Railway 배포용 start.sh 스크립트 생성\n  - nixpacks.toml 및 railway.json 업데이트\n  - 배포 가이드 문서 작성\n- June 29, 2025: Initial setup\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.","size_bytes":6120},"reset_passwords.py":{"content":"from app import app, db\nfrom models import User, Role\nfrom datetime import datetime\n\ndef reset_user_passwords():\n    \"\"\"모든 사용자의 비밀번호를 재설정합니다.\"\"\"\n    with app.app_context():\n        # 모든 사용자 조회\n        users = User.query.all()\n        \n        print(f\"총 {len(users)}명의 사용자 비밀번호를 재설정합니다.\")\n        \n        for user in users:\n            # 원래 역할과 계정에 맞게 비밀번호 설정\n            if user.username == 'admin':\n                password = 'admin123'\n            else:\n                password = 'password123'  # 일반 직원은 모두 동일하게\n            \n            # 비밀번호 재설정 (pbkdf2:sha256 방식으로)\n            user.set_password(password)\n            print(f\"사용자 '{user.username}' 비밀번호 재설정 완료\")\n        \n        # 변경사항 저장\n        db.session.commit()\n        print(\"모든 사용자 비밀번호 재설정 완료\")\n\nif __name__ == \"__main__\":\n    reset_user_passwords()","size_bytes":1036},"routes.py":{"content":"from flask import Blueprint, render_template, redirect, url_for, flash, request\nfrom flask_login import login_required, current_user\nfrom app import db\nfrom models import User, VacationDays, VacationRequest\nfrom datetime import datetime\n\nmain_bp = Blueprint('main', __name__)\n\n@main_bp.route('/')\ndef index():\n    \"\"\"홈 페이지 - 로그인 상태에 따라 대시보드 또는 로그인 페이지로 리디렉션\"\"\"\n    if current_user.is_authenticated:\n        if current_user.is_admin():\n            return redirect(url_for('admin.dashboard'))\n        else:\n            return redirect(url_for('employee.dashboard'))\n    else:\n        return redirect(url_for('auth.login'))\n\n@main_bp.route('/dashboard')\n@login_required\ndef dashboard():\n    \"\"\"대시보드 라우트 - 사용자 역할에 따라 적절한 대시보드로 리디렉션\"\"\"\n    if current_user.is_admin():\n        return redirect(url_for('admin.dashboard'))\n    else:\n        return redirect(url_for('employee.dashboard'))\n\n@main_bp.app_errorhandler(404)\ndef page_not_found(e):\n    \"\"\"404 에러 핸들러\"\"\"\n    return render_template('error.html', error_code=404, error_message='페이지를 찾을 수 없습니다.'), 404\n\n@main_bp.app_errorhandler(500)\ndef internal_server_error(e):\n    \"\"\"500 에러 핸들러\"\"\"\n    return render_template('error.html', error_code=500, error_message='서버 내부 오류가 발생했습니다.'), 500\n\n@main_bp.route('/manual')\ndef manual():\n    \"\"\"시스템 사용설명서\"\"\"\n    return render_template('manual.html')\n\n@main_bp.app_context_processor\ndef inject_today():\n    \"\"\"템플릿에서 사용할 전역 변수\"\"\"\n    return {'now': datetime.now()}\n","size_bytes":1667},"start.sh":{"content":"#!/bin/bash\n\n# Railway 배포용 시작 스크립트\necho \"🚀 에스에스전력 휴가관리시스템 시작 중...\"\n\n# 환경변수 확인\necho \"📊 환경변수 확인 중...\"\nif [ -z \"$DATABASE_URL\" ]; then\n    echo \"⚠️  DATABASE_URL이 설정되지 않았습니다.\"\nelse\n    echo \"✅ DATABASE_URL 설정됨\"\nfi\n\nif [ -z \"$SESSION_SECRET\" ]; then\n    echo \"⚠️  SESSION_SECRET이 설정되지 않았습니다.\"\n    export SESSION_SECRET=\"railway-production-secret-key-$(date +%s)\"\n    echo \"🔑 임시 SESSION_SECRET 생성됨\"\nelse\n    echo \"✅ SESSION_SECRET 설정됨\"\nfi\n\n# 필요한 디렉토리 생성\necho \"📁 디렉토리 구조 생성 중...\"\nmkdir -p instance\nmkdir -p static/uploads\n\n# 데이터베이스 초기화 (관리자 계정 및 공휴일)\necho \"🗄️  데이터베이스 초기 설정 중...\"\npython3 create_admin.py\npython3 add_holidays.py\n\necho \"🎯 성능 최적화된 애플리케이션 시작...\"\n# 성능 최적화된 Gunicorn 설정\nexec gunicorn \\\n    --bind 0.0.0.0:$PORT \\\n    --workers 2 \\\n    --worker-class sync \\\n    --worker-connections 1000 \\\n    --timeout 30 \\\n    --keep-alive 2 \\\n    --max-requests 1000 \\\n    --max-requests-jitter 50 \\\n    --preload \\\n    --access-logfile - \\\n    --error-logfile - \\\n    main:app","size_bytes":1276},"update_company_info.py":{"content":"#!/usr/bin/env python3\n\"\"\"\n회사 정보를 업데이트하는 스크립트\n\"\"\"\n\nimport sqlite3\nimport os\n\ndef update_company_info():\n    # 데이터베이스 파일 경로\n    db_path = 'instance/vacation_permanent.db'\n    \n    if not os.path.exists(db_path):\n        print(f\"데이터베이스 파일을 찾을 수 없습니다: {db_path}\")\n        return\n    \n    try:\n        # SQLite 데이터베이스 연결\n        conn = sqlite3.connect(db_path)\n        cursor = conn.cursor()\n        \n        # 기존 회사 정보 확인\n        cursor.execute(\"SELECT * FROM company_info\")\n        rows = cursor.fetchall()\n        print(\"기존 회사 정보:\")\n        for row in rows:\n            print(row)\n        \n        # 회사 정보 업데이트\n        cursor.execute(\"\"\"\n            UPDATE company_info \n            SET name = '에스에스전력 인사관리시스템',\n                address = '강원도 원주시 하초구길60'\n            WHERE id = 1\n        \"\"\")\n        \n        # 회사 정보가 없는 경우 새로 생성\n        if cursor.rowcount == 0:\n            cursor.execute(\"\"\"\n                INSERT INTO company_info (name, address, ceo_name, registration_number, phone, fax, website, stamp_image)\n                VALUES ('에스에스전력 인사관리시스템', '강원도 원주시 하초구길60', '', '', '', '', '', '')\n            \"\"\")\n            print(\"새로운 회사 정보를 생성했습니다.\")\n        else:\n            print(\"회사 정보를 업데이트했습니다.\")\n        \n        # 변경사항 저장\n        conn.commit()\n        \n        # 업데이트된 정보 확인\n        cursor.execute(\"SELECT * FROM company_info\")\n        rows = cursor.fetchall()\n        print(\"\\n업데이트된 회사 정보:\")\n        for row in rows:\n            print(row)\n            \n    except sqlite3.Error as e:\n        print(f\"데이터베이스 오류: {e}\")\n    finally:\n        if conn:\n            conn.close()\n\nif __name__ == \"__main__\":\n    update_company_info()","size_bytes":2018},"utils.py":{"content":"from app import db\nfrom models import Holiday, VacationRequest\nfrom datetime import datetime, timedelta\n\ndef is_weekend(date):\n    \"\"\"주말인지 확인 (토:5, 일:6)\"\"\"\n    return date.weekday() >= 5\n\ndef is_holiday(date):\n    \"\"\"공휴일인지 확인\"\"\"\n    holiday = Holiday.query.filter_by(date=date).first()\n    return holiday is not None\n\ndef get_vacation_days_count(start_date, end_date, vacation_type=None):\n    \"\"\"휴가 일수 계산 (주말, 공휴일 제외)\"\"\"\n    if start_date > end_date:\n        return 0\n    \n    # 반차 처리\n    if vacation_type and '반차' in vacation_type:\n        return 0.5\n    \n    # 같은 날짜면 1일\n    if start_date == end_date:\n        if is_weekend(start_date) or is_holiday(start_date):\n            return 0\n        return 1\n    \n    business_days = 0\n    current_date = start_date\n    \n    while current_date <= end_date:\n        if not is_weekend(current_date) and not is_holiday(current_date):\n            business_days += 1\n        current_date += timedelta(days=1)\n    \n    return business_days\n\ndef check_overlapping_vacation(user_id, start_date, end_date):\n    \"\"\"같은 기간에 이미 신청한 휴가가 있는지 확인\"\"\"\n    overlapping = VacationRequest.query.filter(\n        VacationRequest.user_id == user_id,\n        VacationRequest.start_date <= end_date,\n        VacationRequest.end_date >= start_date\n    ).first()\n    \n    return overlapping is not None\n\ndef calculate_remaining_vacation_days(user_id, year=None):\n    \"\"\"사용자의 잔여 휴가일수 계산\"\"\"\n    from models import User, VacationDays\n    \n    if year is None:\n        year = datetime.now().year\n    \n    # 사용자 정보 조회\n    user = User.query.get(user_id)\n    if not user:\n        return 0\n    \n    # 해당 연도의 휴가 일수 설정 조회\n    vacation_days = VacationDays.query.filter_by(\n        user_id=user_id,\n        year=year\n    ).first()\n    \n    # 없으면 기본값으로 생성\n    if not vacation_days:\n        vacation_days = VacationDays(\n            user_id=user_id,\n            year=year,\n            total_days=15,  # 기본값\n            used_days=0\n        )\n        db.session.add(vacation_days)\n        db.session.commit()\n    \n    # 해당 연도의 승인된 휴가 총 일수 계산\n    from sqlalchemy import func\n    used_days = db.session.query(\n        func.coalesce(func.sum(VacationRequest.days), 0)\n    ).filter(\n        VacationRequest.user_id == user_id,\n        VacationRequest.status == '승인됨',\n        func.strftime('%Y', VacationRequest.start_date) == str(year)\n    ).scalar()\n    \n    # VacationDays 테이블의 used_days도 업데이트\n    vacation_days.used_days = used_days or 0\n    db.session.commit()\n    \n    # 잔여 휴가일수 = 총 휴가일수 - 사용한 휴가일수\n    remaining = vacation_days.total_days - (used_days or 0)\n    return max(0, remaining)  # 음수가 되지 않도록\n\ndef get_current_year_vacations(year=None):\n    \"\"\"연도별 휴가 통계 조회\"\"\"\n    if year is None:\n        year = datetime.now().year\n    \n    # SQLite 환경에서는 strftime 사용\n    from sqlalchemy import func\n    stats = db.session.query(\n        func.coalesce(func.sum(VacationRequest.days), 0).label('total_used_days'),\n        func.count(VacationRequest.id).label('total_requests')\n    ).filter(\n        func.strftime('%Y', VacationRequest.start_date) == str(year)\n    ).first()\n    \n    return stats\n","size_bytes":3433},"static/css/main.css":{"content":"/**\n * 휴가관리시스템 기본 스타일\n */\n\n/* 커스텀 스크롤바 */\n::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: #f1f5f9;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #cbd5e1;\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: #94a3b8;\n}\n\n/* 테이블 스타일 */\n.table-responsive {\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n}\n\n/* 폼 요소 포커스 효과 */\ninput:focus, select:focus, textarea:focus {\n    outline: 2px solid #1a73e8;\n    outline-offset: -1px;\n}\n\n/* 페이지 전환 애니메이션 */\n.page-enter {\n    opacity: 0;\n    transform: translateY(10px);\n}\n\n.page-enter-active {\n    opacity: 1;\n    transform: translateY(0);\n    transition: opacity 300ms, transform 300ms;\n}\n\n/* 모달 애니메이션 */\n.modal-enter {\n    opacity: 0;\n    transform: scale(0.9);\n}\n\n.modal-enter-active {\n    opacity: 1;\n    transform: scale(1);\n    transition: opacity 200ms, transform 200ms;\n}\n\n/* 알림 메시지 애니메이션 */\n.alert-enter {\n    opacity: 0;\n    transform: translateY(-20px);\n}\n\n.alert-enter-active {\n    opacity: 1;\n    transform: translateY(0);\n    transition: opacity 300ms, transform 300ms;\n}\n\n.alert-exit {\n    opacity: 1;\n    transform: translateY(0);\n}\n\n.alert-exit-active {\n    opacity: 0;\n    transform: translateY(-20px);\n    transition: opacity 300ms, transform 300ms;\n}\n\n/* 버튼 스타일 */\n.btn {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    padding: 0.5rem 1rem;\n    font-weight: 500;\n    border-radius: 0.375rem;\n    transition: all 150ms ease-in-out;\n}\n\n.btn-primary {\n    background-color: #1a73e8;\n    color: #ffffff;\n}\n\n.btn-primary:hover {\n    background-color: #0c5dcb;\n}\n\n.btn-secondary {\n    background-color: #e2e8f0;\n    color: #334155;\n}\n\n.btn-secondary:hover {\n    background-color: #cbd5e1;\n}\n\n.btn-danger {\n    background-color: #ef4444;\n    color: #ffffff;\n}\n\n.btn-danger:hover {\n    background-color: #dc2626;\n}\n\n/* 배지(badge) 스타일 */\n.badge {\n    display: inline-flex;\n    align-items: center;\n    padding: 0.125rem 0.5rem;\n    font-size: 0.75rem;\n    font-weight: 600;\n    border-radius: 9999px;\n}\n\n.badge-yellow {\n    background-color: #fef3c7;\n    color: #92400e;\n}\n\n.badge-green {\n    background-color: #d1fae5;\n    color: #047857;\n}\n\n.badge-red {\n    background-color: #fee2e2;\n    color: #b91c1c;\n}\n\n/* 로딩 스피너 */\n.spinner {\n    display: inline-block;\n    width: 1.5rem;\n    height: 1.5rem;\n    border: 3px solid rgba(203, 213, 225, 0.3);\n    border-radius: 50%;\n    border-top-color: #1a73e8;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% {\n        transform: rotate(0deg);\n    }\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n/* 프린트 스타일 */\n@media print {\n    .no-print {\n        display: none !important;\n    }\n    \n    body {\n        background-color: #ffffff;\n    }\n    \n    .print-container {\n        padding: 0;\n        margin: 0;\n    }\n    \n    .print-header {\n        text-align: center;\n        margin-bottom: 20px;\n    }\n    \n    .print-header h1 {\n        font-size: 24px;\n        margin-bottom: 5px;\n    }\n    \n    .print-table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n    \n    .print-table th,\n    .print-table td {\n        border: 1px solid #e2e8f0;\n        padding: 8px;\n        text-align: left;\n    }\n    \n    .print-table th {\n        background-color: #f8fafc;\n    }\n    \n    .print-footer {\n        margin-top: 20px;\n        text-align: center;\n        font-size: 12px;\n        color: #64748b;\n    }\n}\n\n/* 반응형 유틸리티 */\n@media (max-width: 640px) {\n    .hidden-sm {\n        display: none !important;\n    }\n}\n\n@media (max-width: 768px) {\n    .hidden-md {\n        display: none !important;\n    }\n}\n\n@media (max-width: 1024px) {\n    .hidden-lg {\n        display: none !important;\n    }\n}\n","size_bytes":3918},"static/js/app.js":{"content":"/**\n * 휴가관리시스템 공통 JavaScript 파일\n */\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // 사이드바 토글 (모바일)\n    const sidebarToggle = document.querySelector('[data-toggle=\"sidebar\"]');\n    const sidebar = document.getElementById('sidebar');\n    \n    if (sidebarToggle && sidebar) {\n        sidebarToggle.addEventListener('click', function() {\n            sidebar.classList.toggle('show');\n        });\n    }\n    \n    // 알림 메시지 자동 닫기\n    const alerts = document.querySelectorAll('.alert-dismissible');\n    \n    alerts.forEach(function(alert) {\n        setTimeout(function() {\n            alert.classList.add('opacity-0');\n            setTimeout(function() {\n                alert.remove();\n            }, 300);\n        }, 5000);\n    });\n    \n    // DatePicker 기본 설정 (한국어)\n    if (typeof flatpickr !== 'undefined') {\n        flatpickr.localize({\n            weekdays: {\n                shorthand: ['일', '월', '화', '수', '목', '금', '토'],\n                longhand: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일']\n            },\n            months: {\n                shorthand: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],\n                longhand: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월']\n            },\n            firstDayOfWeek: 0,\n            rangeSeparator: ' ~ ',\n            time_24hr: true\n        });\n    }\n    \n    // 테이블 행 hover 효과\n    const tableRows = document.querySelectorAll('table tbody tr');\n    \n    tableRows.forEach(function(row) {\n        row.addEventListener('mouseenter', function() {\n            this.classList.add('bg-gray-50');\n        });\n        \n        row.addEventListener('mouseleave', function() {\n            this.classList.remove('bg-gray-50');\n        });\n    });\n    \n    // 모달 닫기 버튼\n    const modalCloseBtns = document.querySelectorAll('[data-dismiss=\"modal\"]');\n    \n    modalCloseBtns.forEach(function(btn) {\n        btn.addEventListener('click', function() {\n            const modal = this.closest('.modal');\n            if (modal) {\n                modal.classList.add('hidden');\n            }\n        });\n    });\n    \n    // 모달 외부 클릭 시 닫기\n    const modals = document.querySelectorAll('.modal');\n    \n    modals.forEach(function(modal) {\n        modal.addEventListener('click', function(e) {\n            if (e.target === this) {\n                this.classList.add('hidden');\n            }\n        });\n    });\n    \n    // 모달 열기 버튼\n    const modalOpenBtns = document.querySelectorAll('[data-toggle=\"modal\"]');\n    \n    modalOpenBtns.forEach(function(btn) {\n        btn.addEventListener('click', function() {\n            const targetId = this.getAttribute('data-target');\n            const modal = document.querySelector(targetId);\n            \n            if (modal) {\n                modal.classList.remove('hidden');\n            }\n        });\n    });\n    \n    // 탭 전환\n    const tabLinks = document.querySelectorAll('[data-toggle=\"tab\"]');\n    \n    tabLinks.forEach(function(link) {\n        link.addEventListener('click', function(e) {\n            e.preventDefault();\n            \n            const targetId = this.getAttribute('href');\n            const targetTab = document.querySelector(targetId);\n            \n            // 모든 탭 비활성화\n            document.querySelectorAll('.tab-pane').forEach(function(tab) {\n                tab.classList.add('hidden');\n            });\n            \n            // 모든 탭 링크 비활성화\n            document.querySelectorAll('[data-toggle=\"tab\"]').forEach(function(tabLink) {\n                tabLink.classList.remove('active');\n                tabLink.classList.remove('text-primary');\n                tabLink.classList.remove('border-primary');\n                tabLink.classList.add('text-gray-500');\n                tabLink.classList.add('border-transparent');\n            });\n            \n            // 현재 탭 활성화\n            if (targetTab) {\n                targetTab.classList.remove('hidden');\n                this.classList.add('active');\n                this.classList.add('text-primary');\n                this.classList.add('border-primary');\n                this.classList.remove('text-gray-500');\n                this.classList.remove('border-transparent');\n            }\n        });\n    });\n    \n    // 활성 탭 초기화\n    const activeTabLink = document.querySelector('[data-toggle=\"tab\"].active');\n    if (activeTabLink) {\n        activeTabLink.click();\n    }\n});\n\n/**\n * 날짜를 YYYY-MM-DD 형식으로 변환\n * @param {Date} date - 변환할 날짜\n * @returns {string} 변환된 문자열\n */\nfunction formatDate(date) {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    \n    return `${year}-${month}-${day}`;\n}\n\n/**\n * YYYY-MM-DD 형식의 문자열을 Date 객체로 변환\n * @param {string} dateString - 변환할 날짜 문자열\n * @returns {Date} 변환된 Date 객체\n */\nfunction parseDate(dateString) {\n    const parts = dateString.split('-');\n    return new Date(parts[0], parts[1] - 1, parts[2]);\n}\n\n/**\n * 두 날짜 사이의 일수 계산 (시작일, 종료일 포함)\n * @param {Date} startDate - 시작일\n * @param {Date} endDate - 종료일\n * @returns {number} 일수\n */\nfunction getDaysBetween(startDate, endDate) {\n    const oneDay = 24 * 60 * 60 * 1000; // 밀리초 단위로 하루\n    const diffDays = Math.round(Math.abs((startDate - endDate) / oneDay)) + 1;\n    \n    return diffDays;\n}\n\n/**\n * 날짜가 주말인지 확인\n * @param {Date} date - 확인할 날짜\n * @returns {boolean} 주말 여부\n */\nfunction isWeekend(date) {\n    const day = date.getDay();\n    return day === 0 || day === 6; // 0: 일요일, 6: 토요일\n}\n\n/**\n * 숫자를 통화 형식으로 포맷팅 (한국어)\n * @param {number} number - 포맷팅할 숫자\n * @returns {string} 포맷팅된 문자열\n */\nfunction formatCurrency(number) {\n    return new Intl.NumberFormat('ko-KR', {\n        style: 'currency',\n        currency: 'KRW'\n    }).format(number);\n}\n","size_bytes":6325},"static/js/vacation_request.js":{"content":"/**\n * 휴가 신청 관련 JavaScript 기능\n */\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // 필요한 DOM 요소\n    const vacationForm = document.getElementById('vacationForm');\n    const startDateInput = document.getElementById('start_date');\n    const endDateInput = document.getElementById('end_date');\n    const typeSelect = document.getElementById('type');\n    const daysHiddenInput = document.getElementById('days');\n    const calculatedDaysElement = document.getElementById('calculatedDays');\n    const calculateBtn = document.getElementById('calculateBtn');\n    \n    // 요소가 존재하지 않으면 종료\n    if (!vacationForm) return;\n    \n    // 유형이 반차일 경우 종료일을 시작일과 동일하게 설정\n    if (typeSelect) {\n        typeSelect.addEventListener('change', function() {\n            if (this.value === '반차(오전)' || this.value === '반차(오후)') {\n                if (startDateInput && endDateInput) {\n                    endDateInput.value = startDateInput.value;\n                    endDateInput.disabled = true;\n                    \n                    // 반차는 0.5일로 고정\n                    if (calculatedDaysElement && daysHiddenInput) {\n                        calculatedDaysElement.textContent = '0.5일';\n                        daysHiddenInput.value = '0.5';\n                    }\n                }\n            } else {\n                if (endDateInput) {\n                    endDateInput.disabled = false;\n                }\n                calculateVacationDays();\n            }\n        });\n    }\n    \n    // 날짜 변경 시 자동 계산\n    if (startDateInput) {\n        startDateInput.addEventListener('change', calculateVacationDays);\n    }\n    \n    if (endDateInput) {\n        endDateInput.addEventListener('change', calculateVacationDays);\n    }\n    \n    // 계산 버튼 클릭 시 계산\n    if (calculateBtn) {\n        calculateBtn.addEventListener('click', calculateVacationDays);\n    }\n    \n    // 휴가 일수 계산 함수\n    function calculateVacationDays() {\n        if (!startDateInput || !endDateInput || !typeSelect || !daysHiddenInput || !calculatedDaysElement) {\n            return;\n        }\n        \n        const startDate = startDateInput.value;\n        const endDate = endDateInput.value;\n        const type = typeSelect.value;\n        \n        if (!startDate || !endDate) return;\n        \n        // 반차인 경우 0.5일로 고정\n        if (type === '반차(오전)' || type === '반차(오후)') {\n            calculatedDaysElement.textContent = '0.5일';\n            daysHiddenInput.value = '0.5';\n            return;\n        }\n        \n        // API를 통해 휴가 일수 계산\n        fetch('/employee/calculate-vacation-days', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                start_date: startDate,\n                end_date: endDate,\n                type: type\n            }),\n        })\n        .then(response => response.json())\n        .then(data => {\n            calculatedDaysElement.textContent = data.days + '일';\n            daysHiddenInput.value = data.days;\n            \n            // 0일인 경우 (주말/공휴일만 있는 경우) 경고 표시\n            if (data.days === 0) {\n                calculatedDaysElement.innerHTML = '<span class=\"text-red-600\">0일 (선택한 기간에 평일이 없습니다)</span>';\n            }\n        })\n        .catch(error => {\n            console.error('Error:', error);\n            calculatedDaysElement.textContent = '계산 오류';\n        });\n    }\n    \n    // 폼 제출 전 유효성 검사\n    if (vacationForm) {\n        vacationForm.addEventListener('submit', function(e) {\n            if (!daysHiddenInput || !daysHiddenInput.value || daysHiddenInput.value === '0') {\n                e.preventDefault();\n                alert('휴가 일수가 0일입니다. 날짜를 확인해주세요.');\n            }\n        });\n    }\n    \n    // 초기 계산\n    if (startDateInput && endDateInput && startDateInput.value && endDateInput.value) {\n        calculateVacationDays();\n    }\n    \n    // 특별휴가 설명 표시\n    if (typeSelect) {\n        const specialVacationInfo = document.getElementById('specialVacationInfo');\n        \n        if (specialVacationInfo) {\n            typeSelect.addEventListener('change', function() {\n                if (this.value === '특별휴가') {\n                    specialVacationInfo.classList.remove('hidden');\n                } else {\n                    specialVacationInfo.classList.add('hidden');\n                }\n            });\n        }\n    }\n});\n\n/**\n * 휴가 승인/반려 관련 함수\n */\n\n// 휴가 승인 상태 변경 시 확인\nfunction confirmStatusChange(form) {\n    const statusSelect = form.querySelector('#status');\n    if (!statusSelect) return true;\n    \n    const status = statusSelect.value;\n    \n    if (status === '승인됨') {\n        return confirm('휴가를 승인하시겠습니까?');\n    } else if (status === '반려됨') {\n        return confirm('휴가를 반려하시겠습니까?');\n    }\n    \n    return true;\n}\n\n// 휴가 취소 확인\nfunction confirmCancelVacation() {\n    return confirm('휴가 신청을 취소하시겠습니까? 이 작업은 되돌릴 수 없습니다.');\n}\n","size_bytes":5398},"static/js/performance.js":{"content":"// 성능 최적화 스크립트\n\n// 페이지 로딩 시간 측정\ndocument.addEventListener('DOMContentLoaded', function() {\n    // 로딩 시간 측정\n    const loadTime = performance.now();\n    console.log(`페이지 로딩 시간: ${loadTime.toFixed(2)}ms`);\n    \n    // 느린 로딩 경고 (3초 이상)\n    if (loadTime > 3000) {\n        console.warn('페이지 로딩이 느립니다. 성능 최적화가 필요할 수 있습니다.');\n    }\n});\n\n// 이미지 지연 로딩\ndocument.addEventListener('DOMContentLoaded', function() {\n    const images = document.querySelectorAll('img[data-src]');\n    \n    if ('IntersectionObserver' in window) {\n        const imageObserver = new IntersectionObserver((entries, observer) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    const img = entry.target;\n                    img.src = img.dataset.src;\n                    img.removeAttribute('data-src');\n                    imageObserver.unobserve(img);\n                }\n            });\n        });\n        \n        images.forEach(img => imageObserver.observe(img));\n    } else {\n        // 폴백: IntersectionObserver를 지원하지 않는 브라우저\n        images.forEach(img => {\n            img.src = img.dataset.src;\n            img.removeAttribute('data-src');\n        });\n    }\n});\n\n// 폼 제출 최적화 (중복 제출 방지)\ndocument.addEventListener('DOMContentLoaded', function() {\n    const forms = document.querySelectorAll('form');\n    \n    forms.forEach(form => {\n        let submitted = false;\n        \n        form.addEventListener('submit', function(e) {\n            if (submitted) {\n                e.preventDefault();\n                return false;\n            }\n            \n            submitted = true;\n            \n            // 제출 버튼 비활성화\n            const submitBtn = form.querySelector('button[type=\"submit\"], input[type=\"submit\"]');\n            if (submitBtn) {\n                submitBtn.disabled = true;\n                submitBtn.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> 처리중...';\n            }\n            \n            // 5초 후 다시 활성화 (서버 응답이 없을 경우)\n            setTimeout(() => {\n                submitted = false;\n                if (submitBtn) {\n                    submitBtn.disabled = false;\n                    submitBtn.innerHTML = submitBtn.dataset.originalText || '제출';\n                }\n            }, 5000);\n        });\n    });\n});\n\n// 테이블 가상 스크롤링 (큰 데이터셋용)\nfunction initVirtualScrolling(tableId, rowHeight = 50) {\n    const table = document.getElementById(tableId);\n    if (!table) return;\n    \n    const tbody = table.querySelector('tbody');\n    const rows = Array.from(tbody.querySelectorAll('tr'));\n    \n    if (rows.length <= 50) return; // 50개 이하면 가상 스크롤링 비활성화\n    \n    const container = document.createElement('div');\n    container.style.height = '400px';\n    container.style.overflow = 'auto';\n    \n    const viewport = document.createElement('div');\n    viewport.style.height = `${rows.length * rowHeight}px`;\n    viewport.style.position = 'relative';\n    \n    container.appendChild(viewport);\n    table.parentNode.insertBefore(container, table);\n    table.style.position = 'absolute';\n    table.style.top = '0';\n    \n    let startIndex = 0;\n    const visibleRows = Math.ceil(400 / rowHeight) + 2; // 버퍼 추가\n    \n    function updateVisibleRows() {\n        const scrollTop = container.scrollTop;\n        startIndex = Math.floor(scrollTop / rowHeight);\n        const endIndex = Math.min(startIndex + visibleRows, rows.length);\n        \n        // 기존 행 제거\n        tbody.innerHTML = '';\n        \n        // 보이는 행만 렌더링\n        for (let i = startIndex; i < endIndex; i++) {\n            tbody.appendChild(rows[i].cloneNode(true));\n        }\n        \n        table.style.transform = `translateY(${startIndex * rowHeight}px)`;\n    }\n    \n    container.addEventListener('scroll', updateVisibleRows);\n    updateVisibleRows();\n}\n\n// 캐시 최적화\nfunction cacheData(key, data, ttl = 300000) { // 5분 TTL\n    const item = {\n        data: data,\n        timestamp: Date.now(),\n        ttl: ttl\n    };\n    localStorage.setItem(key, JSON.stringify(item));\n}\n\nfunction getCachedData(key) {\n    const item = localStorage.getItem(key);\n    if (!item) return null;\n    \n    const parsed = JSON.parse(item);\n    if (Date.now() - parsed.timestamp > parsed.ttl) {\n        localStorage.removeItem(key);\n        return null;\n    }\n    \n    return parsed.data;\n}\n\n// AJAX 요청 최적화\nfunction optimizedFetch(url, options = {}) {\n    // 캐시 확인\n    const cacheKey = `fetch_${url}`;\n    const cached = getCachedData(cacheKey);\n    \n    if (cached && options.method !== 'POST') {\n        return Promise.resolve(cached);\n    }\n    \n    // 요청 중복 제거\n    if (!window.pendingRequests) {\n        window.pendingRequests = new Map();\n    }\n    \n    if (window.pendingRequests.has(url)) {\n        return window.pendingRequests.get(url);\n    }\n    \n    const request = fetch(url, {\n        ...options,\n        headers: {\n            'Cache-Control': 'max-age=300',\n            ...options.headers\n        }\n    })\n    .then(response => response.json())\n    .then(data => {\n        // GET 요청만 캐시\n        if (!options.method || options.method === 'GET') {\n            cacheData(cacheKey, data);\n        }\n        window.pendingRequests.delete(url);\n        return data;\n    })\n    .catch(error => {\n        window.pendingRequests.delete(url);\n        throw error;\n    });\n    \n    window.pendingRequests.set(url, request);\n    return request;\n}","size_bytes":5715}}}